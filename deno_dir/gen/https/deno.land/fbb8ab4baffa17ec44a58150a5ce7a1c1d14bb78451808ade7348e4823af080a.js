import { Puppeteer, } from "../../vendor/puppeteer-core/puppeteer/common/Puppeteer.js";
import { BrowserFetcher } from "./BrowserFetcher.ts";
import Launcher from "./Launcher.ts";
import { PUPPETEER_REVISIONS } from "../../vendor/puppeteer-core/puppeteer/revisions.js";
export class PuppeteerDeno extends Puppeteer {
    _lazyLauncher;
    __productName;
    _preferredRevision;
    constructor(settings) {
        const { preferredRevision, productName } = settings;
        super();
        this.__productName = productName;
        this._preferredRevision = preferredRevision;
    }
    connect(options) {
        if (options.product)
            this._productName = options.product;
        return super.connect(options);
    }
    get _productName() {
        return this.__productName;
    }
    set _productName(name) {
        if (this.__productName !== name)
            this._changedProduct = true;
        this.__productName = name;
    }
    launch(options = {}) {
        if (options.product)
            this._productName = options.product;
        return this._launcher.launch(options);
    }
    executablePath() {
        return this._launcher.executablePath();
    }
    get _launcher() {
        if (!this._lazyLauncher ||
            this._lazyLauncher.product !== this._productName ||
            this._changedProduct) {
            switch (this._productName) {
                case "firefox":
                    this._preferredRevision = PUPPETEER_REVISIONS.firefox;
                    break;
                case "chrome":
                default:
                    this._preferredRevision = PUPPETEER_REVISIONS.chromium;
            }
            this._changedProduct = false;
            this._lazyLauncher = Launcher(this._preferredRevision, this._productName);
        }
        return this._lazyLauncher;
    }
    get product() {
        return this._launcher.product;
    }
    defaultArgs(options = {}) {
        return this._launcher.defaultArgs(options);
    }
    createBrowserFetcher(options) {
        return new BrowserFetcher(options);
    }
}
//# sourceMappingURL=data:application/json;base64,