import { filterFiles, getFiles, relative } from "../../deps.ts";
import { isRemotePath } from "./path.ts";
const validSuffix = ["yml", "yaml"];
export function getFilesByFilter(cwd, files) {
    let relativePath = relative(Deno.cwd(), cwd);
    if (!relativePath.startsWith(".")) {
        relativePath = `./${relativePath}`;
    }
    const allFiles = getFiles({
        root: "./",
        hasInfo: false,
        exclude: [".git", ".github", ".vscode", ".vscode-test", "node_modules"],
    });
    const allYamlFiles = allFiles.filter((file) => validSuffix.includes(file.ext))
        .map((item) => item.path);
    return filterGlobFiles(allYamlFiles, files);
}
export function filterGlobFiles(allYamlFiles, globs) {
    const matchCondition = globs ?? ["workflows"];
    const matchConditionGlob = [];
    const anyMatch = [];
    let uniqueFiles = new Set();
    matchCondition.forEach((item) => {
        if (!item.includes("*") && !validSuffix.includes(item)) {
            anyMatch.push(item);
        }
        if (isRemotePath(item) && !item.includes("*")) {
            uniqueFiles.add(item);
        }
        matchConditionGlob.push(item);
    });
    let anyMatchedFiles = [];
    if (anyMatch.length > 0) {
        anyMatchedFiles = allYamlFiles.filter((file) => {
            let isMatch = false;
            anyMatch.forEach((item) => {
                if (file.includes(item)) {
                    isMatch = true;
                }
            });
            return isMatch;
        });
    }
    const globFiles = filterFiles(allYamlFiles, {
        match: matchConditionGlob,
        ignore: "",
    });
    uniqueFiles = new Set([...uniqueFiles, ...anyMatchedFiles, ...globFiles]);
    return Array.from(uniqueFiles);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmlsdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3pDLE1BQU0sV0FBVyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBRXBDLE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxHQUFXLEVBQUUsS0FBZTtJQUUzRCxJQUFJLFlBQVksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzdDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2pDLFlBQVksR0FBRyxLQUFLLFlBQVksRUFBRSxDQUFDO0tBQ3BDO0lBRUQsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3hCLElBQUksRUFBRSxJQUFJO1FBQ1YsT0FBTyxFQUFFLEtBQUs7UUFDZCxPQUFPLEVBQUUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsY0FBYyxDQUFDO0tBQ3hFLENBQUMsQ0FBQztJQUVILE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzNFLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLE9BQU8sZUFBZSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBRUQsTUFBTSxVQUFVLGVBQWUsQ0FDN0IsWUFBc0IsRUFDdEIsS0FBZ0I7SUFFaEIsTUFBTSxjQUFjLEdBQUcsS0FBSyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDOUMsTUFBTSxrQkFBa0IsR0FBYSxFQUFFLENBQUM7SUFDeEMsTUFBTSxRQUFRLEdBQWEsRUFBRSxDQUFDO0lBQzlCLElBQUksV0FBVyxHQUFnQixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBRXpDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEQsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNyQjtRQUNELElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM3QyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0Qsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBQ0gsSUFBSSxlQUFlLEdBQWEsRUFBRSxDQUFDO0lBQ25DLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDdkIsZUFBZSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUM3QyxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7WUFDcEIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUN4QixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQ3ZCLE9BQU8sR0FBRyxJQUFJLENBQUM7aUJBQ2hCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSCxPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDLENBQUMsQ0FBQztLQUNKO0lBQ0QsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLFlBQVksRUFBRTtRQUMxQyxLQUFLLEVBQUUsa0JBQWtCO1FBQ3pCLE1BQU0sRUFBRSxFQUFFO0tBQ1gsQ0FBQyxDQUFDO0lBRUgsV0FBVyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsR0FBRyxXQUFXLEVBQUUsR0FBRyxlQUFlLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzFFLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNqQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmlsdGVyRmlsZXMsIGdldEZpbGVzLCByZWxhdGl2ZSB9IGZyb20gXCIuLi8uLi9kZXBzLnRzXCI7XG5pbXBvcnQgeyBpc1JlbW90ZVBhdGggfSBmcm9tIFwiLi9wYXRoLnRzXCI7XG5jb25zdCB2YWxpZFN1ZmZpeCA9IFtcInltbFwiLCBcInlhbWxcIl07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWxlc0J5RmlsdGVyKGN3ZDogc3RyaW5nLCBmaWxlczogc3RyaW5nW10pIHtcbiAgLy8gZ2xvYiBhbGwgZmlsZXNcbiAgbGV0IHJlbGF0aXZlUGF0aCA9IHJlbGF0aXZlKERlbm8uY3dkKCksIGN3ZCk7XG4gIGlmICghcmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgoXCIuXCIpKSB7XG4gICAgcmVsYXRpdmVQYXRoID0gYC4vJHtyZWxhdGl2ZVBhdGh9YDtcbiAgfVxuXG4gIGNvbnN0IGFsbEZpbGVzID0gZ2V0RmlsZXMoe1xuICAgIHJvb3Q6IFwiLi9cIixcbiAgICBoYXNJbmZvOiBmYWxzZSxcbiAgICBleGNsdWRlOiBbXCIuZ2l0XCIsIFwiLmdpdGh1YlwiLCBcIi52c2NvZGVcIiwgXCIudnNjb2RlLXRlc3RcIiwgXCJub2RlX21vZHVsZXNcIl0sXG4gIH0pO1xuICAvLyBmaWx0ZXIgb25seSAueW1sIC55YW1sIGZpbGVzXG4gIGNvbnN0IGFsbFlhbWxGaWxlcyA9IGFsbEZpbGVzLmZpbHRlcigoZmlsZSkgPT4gdmFsaWRTdWZmaXguaW5jbHVkZXMoZmlsZS5leHQpKVxuICAgIC5tYXAoKGl0ZW0pID0+IGl0ZW0ucGF0aCk7XG4gIHJldHVybiBmaWx0ZXJHbG9iRmlsZXMoYWxsWWFtbEZpbGVzLCBmaWxlcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJHbG9iRmlsZXMoXG4gIGFsbFlhbWxGaWxlczogc3RyaW5nW10sXG4gIGdsb2JzPzogc3RyaW5nW10sXG4pOiBzdHJpbmdbXSB7XG4gIGNvbnN0IG1hdGNoQ29uZGl0aW9uID0gZ2xvYnMgPz8gW1wid29ya2Zsb3dzXCJdO1xuICBjb25zdCBtYXRjaENvbmRpdGlvbkdsb2I6IHN0cmluZ1tdID0gW107XG4gIGNvbnN0IGFueU1hdGNoOiBzdHJpbmdbXSA9IFtdO1xuICBsZXQgdW5pcXVlRmlsZXM6IFNldDxzdHJpbmc+ID0gbmV3IFNldCgpO1xuXG4gIG1hdGNoQ29uZGl0aW9uLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBpZiAoIWl0ZW0uaW5jbHVkZXMoXCIqXCIpICYmICF2YWxpZFN1ZmZpeC5pbmNsdWRlcyhpdGVtKSkge1xuICAgICAgYW55TWF0Y2gucHVzaChpdGVtKTtcbiAgICB9XG4gICAgaWYgKGlzUmVtb3RlUGF0aChpdGVtKSAmJiAhaXRlbS5pbmNsdWRlcyhcIipcIikpIHtcbiAgICAgIHVuaXF1ZUZpbGVzLmFkZChpdGVtKTtcbiAgICB9XG4gICAgbWF0Y2hDb25kaXRpb25HbG9iLnB1c2goaXRlbSk7XG4gIH0pO1xuICBsZXQgYW55TWF0Y2hlZEZpbGVzOiBzdHJpbmdbXSA9IFtdO1xuICBpZiAoYW55TWF0Y2gubGVuZ3RoID4gMCkge1xuICAgIGFueU1hdGNoZWRGaWxlcyA9IGFsbFlhbWxGaWxlcy5maWx0ZXIoKGZpbGUpID0+IHtcbiAgICAgIGxldCBpc01hdGNoID0gZmFsc2U7XG4gICAgICBhbnlNYXRjaC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmIChmaWxlLmluY2x1ZGVzKGl0ZW0pKSB7XG4gICAgICAgICAgaXNNYXRjaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGlzTWF0Y2g7XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgZ2xvYkZpbGVzID0gZmlsdGVyRmlsZXMoYWxsWWFtbEZpbGVzLCB7XG4gICAgbWF0Y2g6IG1hdGNoQ29uZGl0aW9uR2xvYixcbiAgICBpZ25vcmU6IFwiXCIsXG4gIH0pO1xuICAvLyB1bmlxdWUgZmlsZXNcbiAgdW5pcXVlRmlsZXMgPSBuZXcgU2V0KFsuLi51bmlxdWVGaWxlcywgLi4uYW55TWF0Y2hlZEZpbGVzLCAuLi5nbG9iRmlsZXNdKTtcbiAgcmV0dXJuIEFycmF5LmZyb20odW5pcXVlRmlsZXMpO1xufVxuIl19