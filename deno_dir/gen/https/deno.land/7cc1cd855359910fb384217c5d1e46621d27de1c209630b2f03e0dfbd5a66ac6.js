import { Store } from "./json-store.ts";
import { Adapters, Keydb } from "../../deps.ts";
export class JsonStoreAdapter {
    namespaces = new Map();
    path = "data";
    constructor(path) {
        this.path = path ?? this.path;
    }
    static getDataPathFromUri(uri) {
        if (!uri) {
            return undefined;
        }
        let path = uri.toString().slice(5);
        if (path.startsWith("//"))
            path = path.slice(2);
        return path;
    }
    checkNamespace(ns) {
        if (this.namespaces.has(ns)) {
            return;
        }
        else {
            this.namespaces.set(ns, new Store({
                name: `${ns}.json`,
                path: `${this.path}`,
            }));
        }
    }
    ns(ns) {
        if (ns === "") {
            ns = "default-data";
        }
        this.checkNamespace(ns);
        return this.namespaces.get(ns);
    }
    async set(k, v, ns = "", ttl = 0) {
        const n = this.ns(ns);
        await n.set(k, { value: v, ttl });
        return this;
    }
    async get(k, ns = "") {
        const n = this.ns(ns);
        const v = await n?.get(k);
        return !v ? undefined : {
            key: k,
            ns,
            value: v.value,
            ttl: v.ttl,
        };
    }
    async has(k, ns = "") {
        const n = this.ns(ns);
        return await n.has(k) ?? false;
    }
    async delete(k, ns = "") {
        const n = this.ns(ns);
        return await n?.delete(k) ?? false;
    }
    async keys(ns = "") {
        const n = this.ns(ns);
        const obj = await n.toObject();
        return [...(Object.keys(obj) ?? [])];
    }
    async clear(ns = "") {
        const n = this.ns(ns);
        await n.clear();
        return this;
    }
    async deleteExpired(ns = "") {
        const obj = await this.ns(ns).toObject();
        const n = this.ns(ns);
        for (const k of Object.keys(obj)) {
            const v = obj[k];
            if ((v.ttl) !== 0 && Date.now() > v.ttl) {
                delete obj[k];
            }
        }
        await n.set(obj);
    }
}
Adapters.register({
    protocol: "json",
    init(uri) {
        const path = JsonStoreAdapter.getDataPathFromUri(uri.toString());
        const store = new JsonStoreAdapter(path);
        return store;
    },
});
export { Keydb };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1zdG9yZS1hZGFwdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsianNvbi1zdG9yZS1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4QyxPQUFPLEVBQVcsUUFBUSxFQUFFLEtBQUssRUFBZSxNQUFNLGVBQWUsQ0FBQztBQUV0RSxNQUFNLE9BQU8sZ0JBQWdCO0lBQzNCLFVBQVUsR0FHTixJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ2QsSUFBSSxHQUFHLE1BQU0sQ0FBQztJQUNkLFlBQVksSUFBYTtRQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2hDLENBQUM7SUFDRCxNQUFNLENBQUMsa0JBQWtCLENBQUMsR0FBVztRQUNuQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFDRCxJQUFJLElBQUksR0FBdUIsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2RCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO1lBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0QsY0FBYyxDQUFDLEVBQVU7UUFDdkIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUMzQixPQUFPO1NBQ1I7YUFBTTtZQUNMLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUNqQixFQUFFLEVBQ0YsSUFBSSxLQUFLLENBQUM7Z0JBQ1IsSUFBSSxFQUFFLEdBQUcsRUFBRSxPQUFPO2dCQUNsQixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFO2FBQ3JCLENBQUMsQ0FD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QU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQWdCLENBQUM7WUFDaEMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3ZDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2Y7U0FDRjtRQUNELE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUFDRCxRQUFRLENBQUMsUUFBUSxDQUFDO0lBQ2hCLFFBQVEsRUFBRSxNQUFNO0lBQ2hCLElBQUksQ0FBQyxHQUFHO1FBQ04sTUFBTSxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsa0JBQWtCLENBQzlDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FDZixDQUFDO1FBRUYsTUFBTSxLQUFLLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRixDQUFDLENBQUM7QUFDSCxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdG9yZSB9IGZyb20gXCIuL2pzb24tc3RvcmUudHNcIjtcblxuaW1wb3J0IHsgQWRhcHRlciwgQWRhcHRlcnMsIEtleWRiLCBLZXlkYkZpZWxkcyB9IGZyb20gXCIuLi8uLi9kZXBzLnRzXCI7XG5cbmV4cG9ydCBjbGFzcyBKc29uU3RvcmVBZGFwdGVyIGltcGxlbWVudHMgQWRhcHRlciB7XG4gIG5hbWVzcGFjZXM6IE1hcDxcbiAgICBzdHJpbmcsXG4gICAgU3RvcmVcbiAgPiA9IG5ldyBNYXAoKTtcbiAgcGF0aCA9IFwiZGF0YVwiO1xuICBjb25zdHJ1Y3RvcihwYXRoPzogc3RyaW5nKSB7XG4gICAgdGhpcy5wYXRoID0gcGF0aCA/PyB0aGlzLnBhdGg7XG4gIH1cbiAgc3RhdGljIGdldERhdGFQYXRoRnJvbVVyaSh1cmk6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCF1cmkpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGxldCBwYXRoOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1cmkudG9TdHJpbmcoKS5zbGljZSg1KTtcbiAgICBpZiAocGF0aC5zdGFydHNXaXRoKFwiLy9cIikpIHBhdGggPSBwYXRoLnNsaWNlKDIpO1xuICAgIHJldHVybiBwYXRoO1xuICB9XG4gIGNoZWNrTmFtZXNwYWNlKG5zOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5uYW1lc3BhY2VzLmhhcyhucykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5uYW1lc3BhY2VzLnNldChcbiAgICAgICAgbnMsXG4gICAgICAgIG5ldyBTdG9yZSh7XG4gICAgICAgICAgbmFtZTogYCR7bnN9Lmpzb25gLFxuICAgICAgICAgIHBhdGg6IGAke3RoaXMucGF0aH1gLFxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgbnMobnM6IHN0cmluZyk6IFN0b3JlIHtcbiAgICBpZiAobnMgPT09IFwiXCIpIHtcbiAgICAgIG5zID0gXCJkZWZhdWx0LWRhdGFcIjtcbiAgICB9XG4gICAgdGhpcy5jaGVja05hbWVzcGFjZShucyk7XG4gICAgcmV0dXJuIHRoaXMubmFtZXNwYWNlcy5nZXQobnMpIGFzIFN0b3JlO1xuICB9XG5cbiAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgYXN5bmMgc2V0KGs6IHN0cmluZywgdjogYW55LCBucyA9IFwiXCIsIHR0bCA9IDApIHtcbiAgICBjb25zdCBuID0gdGhpcy5ucyhucyk7XG4gICAgYXdhaXQgbi5zZXQoaywgeyB2YWx1ZTogdiwgdHRsIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYXN5bmMgZ2V0KGs6IHN0cmluZywgbnMgPSBcIlwiKTogUHJvbWlzZTxLZXlkYkZpZWxkcyB8IHVuZGVmaW5lZD4ge1xuICAgIGNvbnN0IG4gPSB0aGlzLm5zKG5zKTtcbiAgICBjb25zdCB2ID0gYXdhaXQgbj8uZ2V0KGspO1xuICAgIHJldHVybiAhdiA/IHVuZGVmaW5lZCA6IHtcbiAgICAgIGtleTogayxcbiAgICAgIG5zLFxuICAgICAgdmFsdWU6ICh2IGFzIEtleWRiRmllbGRzKS52YWx1ZSxcbiAgICAgIHR0bDogKHYgYXMgS2V5ZGJGaWVsZHMpLnR0bCxcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgaGFzKGs6IHN0cmluZywgbnMgPSBcIlwiKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgbiA9IHRoaXMubnMobnMpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG4uaGFzKGspID8/IGZhbHNlO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlKGs6IHN0cmluZywgbnMgPSBcIlwiKSB7XG4gICAgY29uc3QgbiA9IHRoaXMubnMobnMpO1xuICAgIHJldHVybiBhd2FpdCBuPy5kZWxldGUoaykgPz8gZmFsc2U7XG4gIH1cblxuICBhc3luYyBrZXlzKG5zID0gXCJcIik6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICBjb25zdCBuID0gdGhpcy5ucyhucyk7XG4gICAgY29uc3Qgb2JqID0gYXdhaXQgbi50b09iamVjdCgpO1xuICAgIHJldHVybiBbLi4uKE9iamVjdC5rZXlzKG9iaikgPz8gW10pXTtcbiAgfVxuXG4gIGFzeW5jIGNsZWFyKG5zID0gXCJcIikge1xuICAgIGNvbnN0IG4gPSB0aGlzLm5zKG5zKTtcbiAgICBhd2FpdCBuLmNsZWFyKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhc3luYyBkZWxldGVFeHBpcmVkKG5zID0gXCJcIikge1xuICAgIGNvbnN0IG9iaiA9IGF3YWl0IHRoaXMubnMobnMpLnRvT2JqZWN0KCk7XG4gICAgY29uc3QgbiA9IHRoaXMubnMobnMpO1xuICAgIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyhvYmopKSB7XG4gICAgICBjb25zdCB2ID0gb2JqW2tdIGFzIEtleWRiRmllbGRzO1xuICAgICAgaWYgKCh2LnR0bCkgIT09IDAgJiYgRGF0ZS5ub3coKSA+IHYudHRsKSB7XG4gICAgICAgIGRlbGV0ZSBvYmpba107XG4gICAgICB9XG4gICAgfVxuICAgIGF3YWl0IG4uc2V0KG9iaik7XG4gIH1cbn1cbkFkYXB0ZXJzLnJlZ2lzdGVyKHtcbiAgcHJvdG9jb2w6IFwianNvblwiLFxuICBpbml0KHVyaSkge1xuICAgIGNvbnN0IHBhdGggPSBKc29uU3RvcmVBZGFwdGVyLmdldERhdGFQYXRoRnJvbVVyaShcbiAgICAgIHVyaS50b1N0cmluZygpLFxuICAgICk7XG5cbiAgICBjb25zdCBzdG9yZSA9IG5ldyBKc29uU3RvcmVBZGFwdGVyKHBhdGgpO1xuICAgIHJldHVybiBzdG9yZTtcbiAgfSxcbn0pO1xuZXhwb3J0IHsgS2V5ZGIgfTtcbiJdfQ==