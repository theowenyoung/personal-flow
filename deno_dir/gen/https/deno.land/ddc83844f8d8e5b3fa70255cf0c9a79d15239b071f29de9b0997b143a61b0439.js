import { defaultsDeep } from "../deps.ts";
const ValidWorkflowFlags = [
    "if",
    "debug",
    "database",
    "sleep",
    "limit",
    "force",
];
const ValidCliWorkflowFlags = ValidWorkflowFlags.concat("files");
function filterValidSourceOptions(options) {
    const { force, limit, debug } = options || {};
    const validSourceOptions = {
        force,
        limit,
        debug,
    };
    return validSourceOptions;
}
function filterValidCliOptions(options) {
    const validWorkflowOptions = {};
    ValidCliWorkflowFlags.forEach((key) => {
        if (options[key] !== undefined) {
            validWorkflowOptions[key] = options[key];
        }
    });
    return validWorkflowOptions;
}
function filterValidWorkflowOptions(options) {
    const validWorkflowOptions = {};
    ValidWorkflowFlags.forEach((key) => {
        if (options[key] !== undefined) {
            validWorkflowOptions[key] = options[key];
        }
    });
    return validWorkflowOptions;
}
export function getFinalWorkflowOptions(WorkflowOptions, runWorkflowOptions) {
    let database = "json://data";
    if (runWorkflowOptions.content) {
        database = "json:///tmp/denoflow/data";
    }
    const defaultOptions = {
        debug: false,
        database: database,
    };
    const finalOptions = defaultsDeep(filterValidCliOptions(runWorkflowOptions), filterValidWorkflowOptions(WorkflowOptions), defaultOptions);
    return finalOptions;
}
export function getFinalSourceOptions(WorkflowOptions, runWorkflowOptions, sourceOptions) {
    const defaultOptions = {
        force: false,
        debug: false,
    };
    const validRunWorkflowOptions = filterValidSourceOptions(runWorkflowOptions);
    const finalOptions = defaultsDeep(validRunWorkflowOptions, sourceOptions, WorkflowOptions, defaultOptions);
    return finalOptions;
}
export function getFinalRunOptions(runWorkflowOptions, isDebug) {
    const defaultOptions = {
        files: ["workflows"],
        debug: isDebug,
        stdin: false,
    };
    const finalOptions = defaultsDeep(runWorkflowOptions, defaultOptions);
    return finalOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1vcHRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGVmYXVsdC1vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDMUMsTUFBTSxrQkFBa0IsR0FBRztJQUN6QixJQUFJO0lBQ0osT0FBTztJQUNQLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87Q0FDUixDQUFDO0FBQ0YsTUFBTSxxQkFBcUIsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDakUsU0FBUyx3QkFBd0IsQ0FDL0IsT0FBMkI7SUFFM0IsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUU5QyxNQUFNLGtCQUFrQixHQUFrQjtRQUN4QyxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7S0FDTixDQUFDO0lBQ0YsT0FBTyxrQkFBa0IsQ0FBQztBQUM1QixDQUFDO0FBQ0QsU0FBUyxxQkFBcUIsQ0FDNUIsT0FBMkI7SUFFM0IsTUFBTSxvQkFBb0IsR0FBdUIsRUFBRSxDQUFDO0lBQ3BELHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQ3BDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsRUFBRTtZQUM5QixvQkFBb0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDMUM7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sb0JBQW9CLENBQUM7QUFDOUIsQ0FBQztBQUNELFNBQVMsMEJBQTBCLENBQ2pDLE9BQXdCO0lBRXhCLE1BQU0sb0JBQW9CLEdBQW9CLEVBQUUsQ0FBQztJQUVqRCxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtRQUNqQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFDOUIsb0JBQW9CLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLG9CQUFvQixDQUFDO0FBQzlCLENBQUM7QUFDRCxNQUFNLFVBQVUsdUJBQXVCLENBQ3JDLGVBQWdDLEVBQ2hDLGtCQUFzQztJQUV0QyxJQUFJLFFBQVEsR0FBRyxhQUFhLENBQUM7SUFDN0IsSUFBSSxrQkFBa0IsQ0FBQyxPQUFPLEVBQUU7UUFDOUIsUUFBUSxHQUFHLDJCQUEyQixDQUFDO0tBQ3hDO0lBQ0QsTUFBTSxjQUFjLEdBQW9CO1FBQ3RDLEtBQUssRUFBRSxLQUFLO1FBQ1osUUFBUSxFQUFFLFFBQVE7S0FDbkIsQ0FBQztJQUNGLE1BQU0sWUFBWSxHQUFvQixZQUFZLENBQ2hELHFCQUFxQixDQUFDLGtCQUFrQixDQUFDLEVBQ3pDLDBCQUEwQixDQUFDLGVBQWUsQ0FBQyxFQUMzQyxjQUFjLENBQ2YsQ0FBQztJQUVGLE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUM7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQ25DLGVBQWdDLEVBQ2hDLGtCQUFzQyxFQUN0QyxhQUE0QjtJQUU1QixNQUFNLGNBQWMsR0FBa0I7UUFDcEMsS0FBSyxFQUFFLEtBQUs7UUFDWixLQUFLLEVBQUUsS0FBSztLQUNiLENBQUM7SUFFRixNQUFNLHVCQUF1QixHQUFHLHdCQUF3QixDQUN0RCxrQkFBa0IsQ0FDbkIsQ0FBQztJQUNGLE1BQU0sWUFBWSxHQUFrQixZQUFZLENBQzlDLHVCQUF1QixFQUN2QixhQUFhLEVBQ2IsZUFBZSxFQUNmLGNBQWMsQ0FDZixDQUFDO0lBRUYsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQztBQUNELE1BQU0sVUFBVSxrQkFBa0IsQ0FDaEMsa0JBQXNDLEVBQ3RDLE9BQWdCO0lBRWhCLE1BQU0sY0FBYyxHQUErQjtRQUNqRCxLQUFLLEVBQUUsQ0FBQyxXQUFXLENBQUM7UUFDcEIsS0FBSyxFQUFFLE9BQU87UUFDZCxLQUFLLEVBQUUsS0FBSztLQUNiLENBQUM7SUFDRixNQUFNLFlBQVksR0FBK0IsWUFBWSxDQUMzRCxrQkFBa0IsRUFDbEIsY0FBYyxDQUNmLENBQUM7SUFFRixPQUFPLFlBQVksQ0FBQztBQUN0QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgUnVuV29ya2Zsb3dPcHRpb25zLFxuICBTb3VyY2VPcHRpb25zLFxuICBXb3JrZmxvd09wdGlvbnMsXG59IGZyb20gXCIuL2ludGVyZmFjZS50c1wiO1xuaW1wb3J0IHsgSW50ZXJuYWxSdW5Xb3JrZmxvd09wdGlvbnMgfSBmcm9tIFwiLi9pbnRlcm5hbC1pbnRlcmZhY2UudHNcIjtcblxuaW1wb3J0IHsgZGVmYXVsdHNEZWVwIH0gZnJvbSBcIi4uL2RlcHMudHNcIjtcbmNvbnN0IFZhbGlkV29ya2Zsb3dGbGFncyA9IFtcbiAgXCJpZlwiLFxuICBcImRlYnVnXCIsXG4gIFwiZGF0YWJhc2VcIixcbiAgXCJzbGVlcFwiLFxuICBcImxpbWl0XCIsXG4gIFwiZm9yY2VcIixcbl07XG5jb25zdCBWYWxpZENsaVdvcmtmbG93RmxhZ3MgPSBWYWxpZFdvcmtmbG93RmxhZ3MuY29uY2F0KFwiZmlsZXNcIik7XG5mdW5jdGlvbiBmaWx0ZXJWYWxpZFNvdXJjZU9wdGlvbnMoXG4gIG9wdGlvbnM6IFJ1bldvcmtmbG93T3B0aW9ucyxcbik6IFNvdXJjZU9wdGlvbnMge1xuICBjb25zdCB7IGZvcmNlLCBsaW1pdCwgZGVidWcgfSA9IG9wdGlvbnMgfHwge307XG5cbiAgY29uc3QgdmFsaWRTb3VyY2VPcHRpb25zOiBTb3VyY2VPcHRpb25zID0ge1xuICAgIGZvcmNlLFxuICAgIGxpbWl0LFxuICAgIGRlYnVnLFxuICB9O1xuICByZXR1cm4gdmFsaWRTb3VyY2VPcHRpb25zO1xufVxuZnVuY3Rpb24gZmlsdGVyVmFsaWRDbGlPcHRpb25zKFxuICBvcHRpb25zOiBSdW5Xb3JrZmxvd09wdGlvbnMsXG4pOiBSdW5Xb3JrZmxvd09wdGlvbnMge1xuICBjb25zdCB2YWxpZFdvcmtmbG93T3B0aW9uczogUnVuV29ya2Zsb3dPcHRpb25zID0ge307XG4gIFZhbGlkQ2xpV29ya2Zsb3dGbGFncy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAob3B0aW9uc1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhbGlkV29ya2Zsb3dPcHRpb25zW2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHZhbGlkV29ya2Zsb3dPcHRpb25zO1xufVxuZnVuY3Rpb24gZmlsdGVyVmFsaWRXb3JrZmxvd09wdGlvbnMoXG4gIG9wdGlvbnM6IFdvcmtmbG93T3B0aW9ucyxcbik6IFdvcmtmbG93T3B0aW9ucyB7XG4gIGNvbnN0IHZhbGlkV29ya2Zsb3dPcHRpb25zOiBXb3JrZmxvd09wdGlvbnMgPSB7fTtcblxuICBWYWxpZFdvcmtmbG93RmxhZ3MuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaWYgKG9wdGlvbnNba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZFdvcmtmbG93T3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHZhbGlkV29ya2Zsb3dPcHRpb25zO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbmFsV29ya2Zsb3dPcHRpb25zKFxuICBXb3JrZmxvd09wdGlvbnM6IFdvcmtmbG93T3B0aW9ucyxcbiAgcnVuV29ya2Zsb3dPcHRpb25zOiBSdW5Xb3JrZmxvd09wdGlvbnMsXG4pOiBXb3JrZmxvd09wdGlvbnMge1xuICBsZXQgZGF0YWJhc2UgPSBcImpzb246Ly9kYXRhXCI7XG4gIGlmIChydW5Xb3JrZmxvd09wdGlvbnMuY29udGVudCkge1xuICAgIGRhdGFiYXNlID0gXCJqc29uOi8vL3RtcC9kZW5vZmxvdy9kYXRhXCI7XG4gIH1cbiAgY29uc3QgZGVmYXVsdE9wdGlvbnM6IFdvcmtmbG93T3B0aW9ucyA9IHtcbiAgICBkZWJ1ZzogZmFsc2UsXG4gICAgZGF0YWJhc2U6IGRhdGFiYXNlLFxuICB9O1xuICBjb25zdCBmaW5hbE9wdGlvbnM6IFdvcmtmbG93T3B0aW9ucyA9IGRlZmF1bHRzRGVlcChcbiAgICBmaWx0ZXJWYWxpZENsaU9wdGlvbnMocnVuV29ya2Zsb3dPcHRpb25zKSxcbiAgICBmaWx0ZXJWYWxpZFdvcmtmbG93T3B0aW9ucyhXb3JrZmxvd09wdGlvbnMpLFxuICAgIGRlZmF1bHRPcHRpb25zLFxuICApO1xuXG4gIHJldHVybiBmaW5hbE9wdGlvbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaW5hbFNvdXJjZU9wdGlvbnMoXG4gIFdvcmtmbG93T3B0aW9uczogV29ya2Zsb3dPcHRpb25zLFxuICBydW5Xb3JrZmxvd09wdGlvbnM6IFJ1bldvcmtmbG93T3B0aW9ucyxcbiAgc291cmNlT3B0aW9uczogU291cmNlT3B0aW9ucyxcbik6IFNvdXJjZU9wdGlvbnMge1xuICBjb25zdCBkZWZhdWx0T3B0aW9uczogU291cmNlT3B0aW9ucyA9IHtcbiAgICBmb3JjZTogZmFsc2UsXG4gICAgZGVidWc6IGZhbHNlLFxuICB9O1xuXG4gIGNvbnN0IHZhbGlkUnVuV29ya2Zsb3dPcHRpb25zID0gZmlsdGVyVmFsaWRTb3VyY2VPcHRpb25zKFxuICAgIHJ1bldvcmtmbG93T3B0aW9ucyxcbiAgKTtcbiAgY29uc3QgZmluYWxPcHRpb25zOiBTb3VyY2VPcHRpb25zID0gZGVmYXVsdHNEZWVwKFxuICAgIHZhbGlkUnVuV29ya2Zsb3dPcHRpb25zLFxuICAgIHNvdXJjZU9wdGlvbnMsXG4gICAgV29ya2Zsb3dPcHRpb25zLFxuICAgIGRlZmF1bHRPcHRpb25zLFxuICApO1xuXG4gIHJldHVybiBmaW5hbE9wdGlvbnM7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RmluYWxSdW5PcHRpb25zKFxuICBydW5Xb3JrZmxvd09wdGlvbnM6IFJ1bldvcmtmbG93T3B0aW9ucyxcbiAgaXNEZWJ1ZzogYm9vbGVhbixcbik6IEludGVybmFsUnVuV29ya2Zsb3dPcHRpb25zIHtcbiAgY29uc3QgZGVmYXVsdE9wdGlvbnM6IEludGVybmFsUnVuV29ya2Zsb3dPcHRpb25zID0ge1xuICAgIGZpbGVzOiBbXCJ3b3JrZmxvd3NcIl0sXG4gICAgZGVidWc6IGlzRGVidWcsXG4gICAgc3RkaW46IGZhbHNlLFxuICB9O1xuICBjb25zdCBmaW5hbE9wdGlvbnM6IEludGVybmFsUnVuV29ya2Zsb3dPcHRpb25zID0gZGVmYXVsdHNEZWVwKFxuICAgIHJ1bldvcmtmbG93T3B0aW9ucyxcbiAgICBkZWZhdWx0T3B0aW9ucyxcbiAgKTtcblxuICByZXR1cm4gZmluYWxPcHRpb25zO1xufVxuIl19