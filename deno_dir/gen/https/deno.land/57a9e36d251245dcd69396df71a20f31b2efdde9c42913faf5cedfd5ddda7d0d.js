import instantiate from "../build/sqlite.js";
import { getStr, setArr, setStr } from "./wasm.ts";
import { Status, Values } from "./constants.ts";
import SqliteError from "./error.ts";
import { Empty, Rows } from "./rows.ts";
export class DB {
    _wasm;
    _open;
    _transactions;
    constructor(path = ":memory:") {
        this._wasm = instantiate().exports;
        this._open = false;
        this._transactions = new Set();
        let status;
        setStr(this._wasm, path, (ptr) => {
            status = this._wasm.open(ptr);
        });
        if (status !== Status.SqliteOk) {
            throw this._error();
        }
        this._open = true;
    }
    query(sql, values) {
        if (!this._open) {
            throw new SqliteError("Database was closed.");
        }
        let stmt = Values.Null;
        setStr(this._wasm, sql, (ptr) => {
            stmt = this._wasm.prepare(ptr);
        });
        if (stmt === Values.Null) {
            throw this._error();
        }
        let parameters = [];
        if (Array.isArray(values)) {
            parameters = values;
        }
        else if (typeof values === "object") {
            for (const key of Object.keys(values)) {
                let idx = Values.Error;
                let name = key;
                if (name[0] !== ":" && name[0] !== "@" && name[0] !== "$") {
                    name = `:${name}`;
                }
                setStr(this._wasm, name, (ptr) => {
                    idx = this._wasm.bind_parameter_index(stmt, ptr);
                });
                if (idx === Values.Error) {
                    this._wasm.finalize(stmt);
                    throw new SqliteError(`No parameter named '${name}'.`);
                }
                parameters[idx - 1] = values[key];
            }
        }
        for (let i = 0; i < parameters.length; i++) {
            let value = parameters[i];
            let status;
            switch (typeof value) {
                case "boolean":
                    value = value ? 1 : 0;
                case "number":
                    if (Number.isSafeInteger(value)) {
                        status = this._wasm.bind_int(stmt, i + 1, value);
                    }
                    else {
                        status = this._wasm.bind_double(stmt, i + 1, value);
                    }
                    break;
                case "bigint":
                    setStr(this._wasm, value.toString(), (ptr) => {
                        status = this._wasm.bind_big_int(stmt, i + 1, ptr);
                    });
                    break;
                case "string":
                    setStr(this._wasm, value, (ptr) => {
                        status = this._wasm.bind_text(stmt, i + 1, ptr);
                    });
                    break;
                default:
                    if (value instanceof Date) {
                        setStr(this._wasm, value.toISOString(), (ptr) => {
                            status = this._wasm.bind_text(stmt, i + 1, ptr);
                        });
                    }
                    else if (value instanceof Uint8Array) {
                        setArr(this._wasm, value, (ptr) => {
                            status = this._wasm.bind_blob(stmt, i + 1, ptr, value.length);
                        });
                    }
                    else if (value === null || value === undefined) {
                        status = this._wasm.bind_null(stmt, i + 1);
                    }
                    else {
                        this._wasm.finalize(stmt);
                        throw new SqliteError(`Can not bind ${typeof value}.`);
                    }
                    break;
            }
            if (status !== Status.SqliteOk) {
                this._wasm.finalize(stmt);
                throw this._error(status);
            }
        }
        const status = this._wasm.step(stmt);
        switch (status) {
            case Status.SqliteDone:
                this._wasm.finalize(stmt);
                return Empty;
                break;
            case Status.SqliteRow:
                const transaction = new Rows(this, stmt);
                this._transactions.add(transaction);
                return transaction;
                break;
            default:
                this._wasm.finalize(stmt);
                throw this._error(status);
                break;
        }
    }
    close(force = false) {
        if (!this._open) {
            return;
        }
        if (force) {
            for (const transaction of this._transactions) {
                transaction.return();
            }
        }
        if (this._wasm.close() !== Status.SqliteOk) {
            throw this._error();
        }
        this._open = false;
    }
    get lastInsertRowId() {
        return this._wasm.last_insert_rowid();
    }
    get changes() {
        return this._wasm.changes();
    }
    get totalChanges() {
        return this._wasm.total_changes();
    }
    _error(code) {
        if (code === undefined) {
            code = this._wasm.get_status();
        }
        const msg = getStr(this._wasm, this._wasm.get_sqlite_error_str());
        return new SqliteError(msg, code);
    }
}
//# sourceMappingURL=data:application/json;base64,