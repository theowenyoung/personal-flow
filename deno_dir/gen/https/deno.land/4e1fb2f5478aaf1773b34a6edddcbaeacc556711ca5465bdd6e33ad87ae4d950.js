import { DB } from "https://deno.land/x/sqlite@v2.3.2/mod.ts";
import { Adapters } from "./adapter.ts";
import { Keydb } from "./keydb.ts";
export class SqliteAdapter {
    db;
    table;
    constructor(path, table = "keydb") {
        this.db = new DB(path);
        this.table = table;
        this.query(`CREATE TABLE IF NOT EXISTS ${this.table} (key VARCHAR(255), value TEXT, ns VARCHAR(255), ttl INTEGER)`);
    }
    query(sql, params = []) {
        return [...this.db.query(sql, params).asObjects()];
    }
    get(key, namespace = "") {
        const res = this.query(`SELECT * FROM ${this.table} WHERE key = ? AND ns = ?`, [
            key,
            namespace,
        ])[0];
        return res;
    }
    has(key, namespace = "") {
        const res = this.query(`SELECT key FROM ${this.table} WHERE key = ? AND ns = ?`, [key, namespace]);
        return res.length > 0;
    }
    set(key, value, namespace = "", ttl = 0) {
        if (this.has(key))
            this.query(`UPDATE ${this.table} SET value = ?, ttl = ? WHERE key = ? AND ns = ?`, [value, ttl, key, namespace]);
        else
            this.query(`INSERT INTO ${this.table} (key, value, ns, ttl) VALUES (?, ?, ?, ?)`, [key, value, namespace, ttl]);
        return this;
    }
    clear(namespace = "") {
        this.query(`DELETE FROM ${this.table} WHERE ns = ?`, [namespace]);
        return this;
    }
    delete(key, namespace = "") {
        if (!this.has(key))
            return false;
        this.query(`DELETE FROM ${this.table} WHERE key = ? AND ns = ?`, [
            key,
            namespace,
        ]);
        return true;
    }
    keys(namespace = "") {
        return this.query(`SELECT key FROM ${this.table} WHERE ns = ?`, [namespace]).map((e) => e.key);
    }
    deleteExpired(namespace = "") {
        this.query(`DELETE FROM ${this.table} WHERE ns = ? AND ttl != 0 AND ttl < ?`, [namespace, Date.now()]);
    }
}
Adapters.register({
    protocol: "sqlite",
    init(uri) {
        let path = uri.toString().slice(7);
        if (path.startsWith("//"))
            path = path.slice(2);
        if (path == "memory")
            path = undefined;
        return new SqliteAdapter(path);
    },
});
export { Keydb };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3FsaXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3FsaXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUM5RCxPQUFPLEVBQVcsUUFBUSxFQUFlLE1BQU0sY0FBYyxDQUFDO0FBQzlELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFbkMsTUFBTSxPQUFPLGFBQWE7SUFDeEIsRUFBRSxDQUFLO0lBQ1AsS0FBSyxDQUFTO0lBRWQsWUFBWSxJQUFhLEVBQUUsUUFBZ0IsT0FBTztRQUNoRCxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxLQUFLLENBQ1IsOEJBQThCLElBQUksQ0FBQyxLQUFLLCtEQUErRCxDQUN4RyxDQUFDO0lBQ0osQ0FBQztJQUdELEtBQUssQ0FBVSxHQUFXLEVBQUUsU0FBZ0IsRUFBRTtRQUM1QyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQVEsQ0FBQztJQUM1RCxDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQVcsRUFBRSxTQUFTLEdBQUcsRUFBRTtRQUM3QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUtuQixpQkFBaUIsSUFBSSxDQUFDLEtBQUssMkJBQTJCLEVBQUU7WUFDekQsR0FBRztZQUNILFNBQVM7U0FDVixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDTixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBVyxFQUFFLFNBQVMsR0FBRyxFQUFFO1FBQzdCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQ3BCLG1CQUFtQixJQUFJLENBQUMsS0FBSywyQkFBMkIsRUFDeEQsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQ2pCLENBQUM7UUFDRixPQUFPLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFHRCxHQUFHLENBQUMsR0FBVyxFQUFFLEtBQVUsRUFBRSxTQUFTLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ2xELElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7WUFDZixJQUFJLENBQUMsS0FBSyxDQUNSLFVBQVUsSUFBSSxDQUFDLEtBQUssa0RBQWtELEVBQ3RFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQzdCLENBQUM7O1lBRUYsSUFBSSxDQUFDLEtBQUssQ0FDUixlQUFlLElBQUksQ0FBQyxLQUFLLDRDQUE0QyxFQUNyRSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUM3QixDQUFDO1FBQ0osT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVMsR0FBRyxFQUFFO1FBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxJQUFJLENBQUMsS0FBSyxlQUFlLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFXLEVBQUUsU0FBUyxHQUFHLEVBQUU7UUFDaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLElBQUksQ0FBQyxLQUFLLDJCQUEyQixFQUFFO1lBQy9ELEdBQUc7WUFDSCxTQUFTO1NBQ1YsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FDZixtQkFBbUIsSUFBSSxDQUFDLEtBQUssZUFBZSxFQUM1QyxDQUFDLFNBQVMsQ0FBQyxDQUNaLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELGFBQWEsQ0FBQyxTQUFTLEdBQUcsRUFBRTtRQUMxQixJQUFJLENBQUMsS0FBSyxDQUNSLGVBQWUsSUFBSSxDQUFDLEtBQUssd0NBQXdDLEVBQ2pFLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUN4QixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBRUQsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUNoQixRQUFRLEVBQUUsUUFBUTtJQUNsQixJQUFJLENBQUMsR0FBRztRQUNOLElBQUksSUFBSSxHQUF1QixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRCxJQUFJLElBQUksSUFBSSxRQUFRO1lBQUUsSUFBSSxHQUFHLFNBQVMsQ0FBQztRQUN2QyxPQUFPLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Q0FDRixDQUFDLENBQUM7QUFFSCxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEQiB9IGZyb20gXCJodHRwczovL2Rlbm8ubGFuZC94L3NxbGl0ZUB2Mi4zLjIvbW9kLnRzXCI7XHJcbmltcG9ydCB7IEFkYXB0ZXIsIEFkYXB0ZXJzLCBLZXlkYkZpZWxkcyB9IGZyb20gXCIuL2FkYXB0ZXIudHNcIjtcclxuaW1wb3J0IHsgS2V5ZGIgfSBmcm9tIFwiLi9rZXlkYi50c1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNxbGl0ZUFkYXB0ZXIgaW1wbGVtZW50cyBBZGFwdGVyIHtcclxuICBkYjogREI7XHJcbiAgdGFibGU6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IocGF0aD86IHN0cmluZywgdGFibGU6IHN0cmluZyA9IFwia2V5ZGJcIikge1xyXG4gICAgdGhpcy5kYiA9IG5ldyBEQihwYXRoKTtcclxuICAgIHRoaXMudGFibGUgPSB0YWJsZTtcclxuICAgIHRoaXMucXVlcnkoXHJcbiAgICAgIGBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAke3RoaXMudGFibGV9IChrZXkgVkFSQ0hBUigyNTUpLCB2YWx1ZSBURVhULCBucyBWQVJDSEFSKDI1NSksIHR0bCBJTlRFR0VSKWBcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxyXG4gIHF1ZXJ5PFQgPSBhbnk+KHNxbDogc3RyaW5nLCBwYXJhbXM6IGFueVtdID0gW10pOiBUW10ge1xyXG4gICAgcmV0dXJuIFsuLi50aGlzLmRiLnF1ZXJ5KHNxbCwgcGFyYW1zKS5hc09iamVjdHMoKV0gYXMgVFtdO1xyXG4gIH1cclxuXHJcbiAgZ2V0KGtleTogc3RyaW5nLCBuYW1lc3BhY2UgPSBcIlwiKTogS2V5ZGJGaWVsZHMgfCB1bmRlZmluZWQge1xyXG4gICAgY29uc3QgcmVzID0gdGhpcy5xdWVyeTx7XHJcbiAgICAgIGtleTogc3RyaW5nO1xyXG4gICAgICB2YWx1ZTogc3RyaW5nO1xyXG4gICAgICBuczogc3RyaW5nO1xyXG4gICAgICB0dGw6IG51bWJlcjtcclxuICAgIH0+KGBTRUxFQ1QgKiBGUk9NICR7dGhpcy50YWJsZX0gV0hFUkUga2V5ID0gPyBBTkQgbnMgPSA/YCwgW1xyXG4gICAgICBrZXksXHJcbiAgICAgIG5hbWVzcGFjZSxcclxuICAgIF0pWzBdO1xyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIGhhcyhrZXk6IHN0cmluZywgbmFtZXNwYWNlID0gXCJcIik6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgcmVzID0gdGhpcy5xdWVyeTx7IGtleTogc3RyaW5nIH0+KFxyXG4gICAgICBgU0VMRUNUIGtleSBGUk9NICR7dGhpcy50YWJsZX0gV0hFUkUga2V5ID0gPyBBTkQgbnMgPSA/YCxcclxuICAgICAgW2tleSwgbmFtZXNwYWNlXVxyXG4gICAgKTtcclxuICAgIHJldHVybiByZXMubGVuZ3RoID4gMDtcclxuICB9XHJcblxyXG4gIC8vIGRlbm8tbGludC1pZ25vcmUgbm8tZXhwbGljaXQtYW55XHJcbiAgc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogYW55LCBuYW1lc3BhY2UgPSBcIlwiLCB0dGwgPSAwKTogdGhpcyB7XHJcbiAgICBpZiAodGhpcy5oYXMoa2V5KSlcclxuICAgICAgdGhpcy5xdWVyeShcclxuICAgICAgICBgVVBEQVRFICR7dGhpcy50YWJsZX0gU0VUIHZhbHVlID0gPywgdHRsID0gPyBXSEVSRSBrZXkgPSA/IEFORCBucyA9ID9gLFxyXG4gICAgICAgIFt2YWx1ZSwgdHRsLCBrZXksIG5hbWVzcGFjZV1cclxuICAgICAgKTtcclxuICAgIGVsc2VcclxuICAgICAgdGhpcy5xdWVyeShcclxuICAgICAgICBgSU5TRVJUIElOVE8gJHt0aGlzLnRhYmxlfSAoa2V5LCB2YWx1ZSwgbnMsIHR0bCkgVkFMVUVTICg/LCA/LCA/LCA/KWAsXHJcbiAgICAgICAgW2tleSwgdmFsdWUsIG5hbWVzcGFjZSwgdHRsXVxyXG4gICAgICApO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBjbGVhcihuYW1lc3BhY2UgPSBcIlwiKTogdGhpcyB7XHJcbiAgICB0aGlzLnF1ZXJ5KGBERUxFVEUgRlJPTSAke3RoaXMudGFibGV9IFdIRVJFIG5zID0gP2AsIFtuYW1lc3BhY2VdKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlKGtleTogc3RyaW5nLCBuYW1lc3BhY2UgPSBcIlwiKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoIXRoaXMuaGFzKGtleSkpIHJldHVybiBmYWxzZTtcclxuICAgIHRoaXMucXVlcnkoYERFTEVURSBGUk9NICR7dGhpcy50YWJsZX0gV0hFUkUga2V5ID0gPyBBTkQgbnMgPSA/YCwgW1xyXG4gICAgICBrZXksXHJcbiAgICAgIG5hbWVzcGFjZSxcclxuICAgIF0pO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBrZXlzKG5hbWVzcGFjZSA9IFwiXCIpOiBzdHJpbmdbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5xdWVyeTx7IGtleTogc3RyaW5nIH0+KFxyXG4gICAgICBgU0VMRUNUIGtleSBGUk9NICR7dGhpcy50YWJsZX0gV0hFUkUgbnMgPSA/YCxcclxuICAgICAgW25hbWVzcGFjZV1cclxuICAgICkubWFwKChlKSA9PiBlLmtleSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVFeHBpcmVkKG5hbWVzcGFjZSA9IFwiXCIpOiB2b2lkIHtcclxuICAgIHRoaXMucXVlcnkoXHJcbiAgICAgIGBERUxFVEUgRlJPTSAke3RoaXMudGFibGV9IFdIRVJFIG5zID0gPyBBTkQgdHRsICE9IDAgQU5EIHR0bCA8ID9gLFxyXG4gICAgICBbbmFtZXNwYWNlLCBEYXRlLm5vdygpXVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbkFkYXB0ZXJzLnJlZ2lzdGVyKHtcclxuICBwcm90b2NvbDogXCJzcWxpdGVcIixcclxuICBpbml0KHVyaSkge1xyXG4gICAgbGV0IHBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVyaS50b1N0cmluZygpLnNsaWNlKDcpO1xyXG4gICAgaWYgKHBhdGguc3RhcnRzV2l0aChcIi8vXCIpKSBwYXRoID0gcGF0aC5zbGljZSgyKTtcclxuICAgIGlmIChwYXRoID09IFwibWVtb3J5XCIpIHBhdGggPSB1bmRlZmluZWQ7XHJcbiAgICByZXR1cm4gbmV3IFNxbGl0ZUFkYXB0ZXIocGF0aCk7XHJcbiAgfSxcclxufSk7XHJcblxyXG5leHBvcnQgeyBLZXlkYiB9O1xyXG4iXX0=