import * as path from "https://deno.land/std/path/mod.ts";
function _determineMimeType(filePath) {
    const fileExtension = path.extname(filePath);
    switch (fileExtension) {
        case ".aac": return "audio/aac";
        case ".abw": return "application/x-abiword";
        case ".arc": return "application/x-freearc";
        case ".avi": return "video/x-msvideo";
        case ".azw": return "application/vnd.amazon.ebook";
        case ".bin": return "application/octet-stream";
        case ".bmp": return "image/bmp";
        case ".bz": return "application/x-bzip";
        case ".bz2": return "application/x-bzip2";
        case ".csh": return "application/x-csh";
        case ".css": return "text/css";
        case ".csv": return "text/csv";
        case ".doc": return "application/msword";
        case ".docx": return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
        case ".eot": return "application/vnd.ms-fontobject";
        case ".epub": return "application/epub+zip";
        case ".gz": return "application/gzip";
        case ".gif": return "image/gif";
        case ".htm": return "text/html";
        case ".html": return "text/html";
        case ".ico": return "image/vnd.microsoft.icon";
        case ".ics": return "text/calendar";
        case ".jar": return "application/java-archive";
        case ".jpeg": return "image/jpeg";
        case ".jpg": return "image/jpeg";
        case ".js": return "text/javascript";
        case ".json": return "application/json";
        case ".jsonld": return "application/ld+json";
        case ".mid": return "audio/midi";
        case ".midi": return "audio/midi";
        case ".mjs": return "text/javascript";
        case ".mp3": return "audio/mpeg";
        case ".mpeg": return "video/mpeg";
        case ".mpkg": return "application/vnd.apple.installer+xml";
        case ".odp": return "application/vnd.oasis.opendocument.presentation";
        case ".ods": return "application/vnd.oasis.opendocument.spreadsheet";
        case ".odt": return "application/vnd.oasis.opendocument.text";
        case ".oga": return "audio/ogg";
        case ".ogv": return "video/ogg";
        case ".ogx": return "application/ogg";
        case ".opus": return "audio/opus";
        case ".otf": return "font/otf";
        case ".png": return "image/png";
        case ".pdf": return "application/pdf";
        case ".php": return "application/php";
        case ".ppt": return "application/vnd.ms-powerpoint";
        case ".pptx": return "application/vnd.openxmlformats-officedocument.presentationml.presentation";
        case ".rar": return "application/vnd.rar";
        case ".rtf": return "application/rtf";
        case ".sh": return "application/x-sh";
        case ".svg": return "image/svg+xml";
        case ".swf": return "application/x-shockwave-flash";
        case ".tar": return "application/x-tar";
        case ".tif": return "image/tiff";
        case ".tiff": return "image/tiff";
        case ".ts": return "video/mp2t";
        case ".ttf": return "font/ttf";
        case ".txt": return "text/plain";
        case ".vsd": return "application/vnd.visio";
        case ".wav": return "audio/wav";
        case ".weba": return "audio/webm";
        case ".webm": return "video/webm";
        case ".webp": return "image/webp";
        case ".woff": return "font/woff";
        case ".woff2": return "font/woff2";
        case ".xhtml": return "application/xhtml+xml";
        case ".xls": return "application/vnd.ms-excel";
        case ".xlsx": return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        case ".xml": return "application/xml";
        case ".xul": return "application/vnd.mozilla.xul+xml";
        case ".zip": return "application/zip";
        case ".3gp": return "video/3gpp";
        case ".3g2": return "video/3gpp2";
        case ".7z": return "application/x-7z-compressed";
    }
    throw new Error("File extension has no known mimetype");
}
function _encodeU8intToBase64String(uint8arr) {
    const CHUNK_SIZE = 0x8000;
    const charArray = [];
    for (let i = 0; i < uint8arr.length; i += CHUNK_SIZE) {
        charArray.push(String.fromCharCode.apply(null, uint8arr.subarray(i, i + CHUNK_SIZE)));
    }
    return btoa(charArray.join(""));
}
function _convertStringToUint8(str) {
    return new Uint8Array(new TextEncoder().encode(str));
}
function _decodeBase64Bytes(bytes) {
    return new TextDecoder().decode(Uint8Array.from(atob(new TextDecoder().decode(bytes)), c => c.charCodeAt(0)));
}
function _decodeBase64BytesToUint8(bytes) {
    return Uint8Array.from(atob(new TextDecoder().decode(bytes)), c => c.charCodeAt(0));
}
export class Base64 {
    bytes;
    mime;
    isBase64Encoded;
    constructor(data) {
        this.bytes = data.bytes;
        this.mime = data.mime;
        this.isBase64Encoded = data.isBase64Encoded;
    }
    static fromString(unencodedString) {
        return new Base64({
            bytes: _convertStringToUint8(unencodedString),
            mime: null,
            isBase64Encoded: false,
        });
    }
    static fromBase64String(encodedString) {
        return new Base64({
            bytes: _convertStringToUint8(encodedString),
            mime: null,
            isBase64Encoded: true,
        });
    }
    static fromUint8Array(uint8arr) {
        return new Base64({
            bytes: uint8arr,
            mime: null,
            isBase64Encoded: false,
        });
    }
    static fromBase64Uint8Array(uint8arr) {
        return new Base64({
            bytes: uint8arr,
            mime: null,
            isBase64Encoded: true,
        });
    }
    static fromFile(filePath) {
        return new Base64({
            bytes: Deno.readFileSync(filePath),
            mime: `data:${_determineMimeType(filePath)};base64,`,
            isBase64Encoded: false,
        });
    }
    static fromBase64File(filePath) {
        return new Base64({
            bytes: Deno.readFileSync(filePath),
            mime: null,
            isBase64Encoded: true,
        });
    }
    toString() {
        if (this.isBase64Encoded) {
            return _decodeBase64Bytes(this.bytes);
        }
        else {
            return _encodeU8intToBase64String(this.bytes);
        }
    }
    toStringWithMime() {
        if (this.mime) {
            if (this.isBase64Encoded) {
                return _decodeBase64Bytes(this.bytes);
            }
            else {
                return this.mime + _encodeU8intToBase64String(this.bytes);
            }
        }
        else {
            if (this.isBase64Encoded) {
                return _decodeBase64Bytes(this.bytes);
            }
            else {
                return _encodeU8intToBase64String(this.bytes);
            }
        }
    }
    toFile(filePath) {
        if (this.isBase64Encoded) {
            Deno.writeFileSync(filePath, _decodeBase64BytesToUint8(this.bytes));
        }
        else {
            Deno.writeFileSync(filePath, new TextEncoder().encode(_encodeU8intToBase64String(this.bytes)));
        }
    }
    toFileWithMime(filePath) {
        if (!this.mime) {
            this.toFile(filePath);
        }
        else {
            Deno.writeFileSync(filePath, new TextEncoder().encode(this.mime + _encodeU8intToBase64String(this.bytes)));
        }
    }
}
//# sourceMappingURL=data:application/json;base64,