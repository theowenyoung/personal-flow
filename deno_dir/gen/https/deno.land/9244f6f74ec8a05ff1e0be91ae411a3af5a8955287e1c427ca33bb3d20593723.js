import { get } from "./utils/get.ts";
import { getFrom } from "./get-from.ts";
import { runScript } from "./utils/run-script.ts";
import { isClass } from "./utils/object.ts";
import { hasPermissionSlient } from "./permission.ts";
export function getStepResponse(ctx) {
    return {
        result: ctx.public.result,
        ok: ctx.public.ok,
        isRealOk: ctx.public.isRealOk,
        error: ctx.public.error,
        cmdResult: ctx.public.cmdResult,
        cmdCode: ctx.public.cmdCode,
        cmdOk: ctx.public.cmdOk,
        cmdError: ctx.public.cmdError,
    };
}
export function setOkResult(ctx, stepResult) {
    ctx.public.result = stepResult;
    ctx.public.ok = true;
    ctx.public.isRealOk = true;
    ctx.public.error = undefined;
    return ctx;
}
export function setErrorResult(ctx, error) {
    ctx.public.result = undefined;
    ctx.public.error = error;
    ctx.public.isRealOk = false;
    ctx.public.ok = false;
    if (error.code !== undefined) {
        ctx.public.cmdCode = error.code;
        ctx.public.cmdError = error.message;
        ctx.public.cmdOk = false;
        ctx.public.cmdResult = undefined;
    }
    return ctx;
}
class Sample {
    constructor(args) {
    }
}
export async function runStep(ctx, step) {
    const { reporter } = step;
    if (step.env) {
        for (const key in step.env) {
            const value = step.env[key];
            if (typeof value === "string") {
                const debugEnvPermmision = { name: "env", variable: key };
                if (await hasPermissionSlient(debugEnvPermmision)) {
                    Deno.env.set(key, value);
                }
            }
        }
    }
    let stepResult;
    try {
        const from = step.from;
        let use;
        const args = step.args || [];
        if (from) {
            const lib = await getFrom(ctx, from, reporter);
            use = get(lib, step.use ?? "default");
            if (step.use && !use) {
                use = get(lib.default, step.use);
            }
            if (step.use && !use) {
                throw new Error(`Can not get use module: ${step.use}`);
            }
        }
        else if (step.use &&
            typeof globalThis[step.use] === "function") {
            use = globalThis[step.use];
        }
        else if (step.use && step.use.startsWith("Deno.")) {
            const denoApiMethod = step.use.replace("Deno.", "");
            use = get(Deno, denoApiMethod);
        }
        else if (step.use) {
            throw new Error(`${step.use} is not a function`);
        }
        if (use && isClass(use)) {
            reporter.debug(`Run ${use.name} instance with args: ${JSON.stringify(args, null, 2)}`);
            stepResult = await new use(...args);
            ctx = setOkResult(ctx, stepResult);
            reporter.debug(`use: result: ${typeof stepResult === "string"
                ? stepResult
                : JSON.stringify(stepResult, null, 2)}`);
        }
        else if (typeof use === "function") {
            reporter.debug(`Run function ${use.name} with args: ${JSON.stringify(args, null, 2)}`);
            stepResult = await use(...args);
            ctx = setOkResult(ctx, stepResult);
            reporter.debug(`use: result: ${typeof stepResult === "string"
                ? stepResult
                : JSON.stringify(stepResult, null, 2)}`);
        }
        else if (use !== undefined) {
            const e = "`use` must be a function, but got " + typeof use;
            throw new Error(e);
        }
    }
    catch (e) {
        reporter.warning(`Failed to run use`);
        throw e;
    }
    if (step.run) {
        try {
            const scriptResult = await runScript(step.run, {
                ctx: ctx.public,
            });
            stepResult = scriptResult.result;
            ctx = setOkResult(ctx, stepResult);
            ctx.public.state = scriptResult.ctx.state;
            reporter.debug(`Result: ${typeof stepResult === "string"
                ? stepResult
                : JSON.stringify(stepResult, null, 2)}`, "Success run script");
        }
        catch (e) {
            reporter.warning(`Failed to run script`);
            throw e;
        }
    }
    ctx.public.ok = true;
    return ctx;
}
//# sourceMappingURL=data:application/json;base64,