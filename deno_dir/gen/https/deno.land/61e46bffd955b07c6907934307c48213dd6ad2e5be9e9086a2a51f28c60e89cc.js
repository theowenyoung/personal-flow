import { join, resolve } from "./deps.ts";
const POSIX_HOME = "HOME";
export function cachedir() {
    const env = Deno.env.get;
    const os = Deno.build.os;
    const deno = env("DENO_DIR");
    if (deno)
        return resolve(deno);
    let home;
    let path;
    switch (os) {
        case "linux": {
            const xdg = env("XDG_CACHE_HOME");
            home = xdg ?? env(POSIX_HOME);
            path = xdg ? "deno" : join(".cache", "deno");
            break;
        }
        case "darwin":
            home = env(POSIX_HOME);
            path = join("Library", "Caches", "deno");
            break;
        case "windows":
            home = env("LOCALAPPDATA");
            home = home ?? env("USERPROFILE");
            path = "deno";
            break;
    }
    path = home ? path : ".deno";
    if (!home)
        return path;
    return resolve(join(home, path));
}
export function tmpdir() {
    const env = Deno.env.get;
    const os = Deno.build.os;
    const tmp = env("TMPDIR") ?? env("TEMP") ?? env("TMP");
    if (tmp)
        return resolve(tmp);
    switch (os) {
        case "linux":
        case "darwin":
            return resolve("/tmp");
        case "windows":
            return resolve(join(env("HOMEDRIVE") ?? env("SYSTEMDRIVE") ?? "C:", "TEMP"));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0b3JpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkaXJlY3Rvcmllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUUxQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFFMUIsTUFBTSxVQUFVLFFBQVE7SUFDdEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7SUFDekIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7SUFFekIsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRTdCLElBQUksSUFBSTtRQUFFLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRS9CLElBQUksSUFBd0IsQ0FBQztJQUM3QixJQUFJLElBQVksQ0FBQztJQUNqQixRQUFRLEVBQUUsRUFBRTtRQUNWLEtBQUssT0FBTyxDQUFDLENBQUM7WUFDWixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUNsQyxJQUFJLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUM5QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDN0MsTUFBTTtTQUNQO1FBQ0QsS0FBSyxRQUFRO1lBQ1gsSUFBSSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN2QixJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDekMsTUFBTTtRQUVSLEtBQUssU0FBUztZQUNaLElBQUksR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDM0IsSUFBSSxHQUFHLElBQUksSUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDbEMsSUFBSSxHQUFHLE1BQU0sQ0FBQztZQUNkLE1BQU07S0FDVDtJQUVELElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQzdCLElBQUksQ0FBQyxJQUFJO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDdkIsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFFRCxNQUFNLFVBQVUsTUFBTTtJQUNwQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztJQUN6QixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztJQUV6QixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2RCxJQUFJLEdBQUc7UUFBRSxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUU3QixRQUFRLEVBQUUsRUFBRTtRQUNWLEtBQUssT0FBTyxDQUFDO1FBQ2IsS0FBSyxRQUFRO1lBQ1gsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekIsS0FBSyxTQUFTO1lBQ1osT0FBTyxPQUFPLENBQ1osSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUM3RCxDQUFDO0tBQ0w7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgam9pbiwgcmVzb2x2ZSB9IGZyb20gXCIuL2RlcHMudHNcIjtcblxuY29uc3QgUE9TSVhfSE9NRSA9IFwiSE9NRVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY2FjaGVkaXIoKTogc3RyaW5nIHtcbiAgY29uc3QgZW52ID0gRGVuby5lbnYuZ2V0O1xuICBjb25zdCBvcyA9IERlbm8uYnVpbGQub3M7XG5cbiAgY29uc3QgZGVubyA9IGVudihcIkRFTk9fRElSXCIpO1xuXG4gIGlmIChkZW5vKSByZXR1cm4gcmVzb2x2ZShkZW5vKTtcblxuICBsZXQgaG9tZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBsZXQgcGF0aDogc3RyaW5nO1xuICBzd2l0Y2ggKG9zKSB7XG4gICAgY2FzZSBcImxpbnV4XCI6IHtcbiAgICAgIGNvbnN0IHhkZyA9IGVudihcIlhER19DQUNIRV9IT01FXCIpO1xuICAgICAgaG9tZSA9IHhkZyA/PyBlbnYoUE9TSVhfSE9NRSk7XG4gICAgICBwYXRoID0geGRnID8gXCJkZW5vXCIgOiBqb2luKFwiLmNhY2hlXCIsIFwiZGVub1wiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiZGFyd2luXCI6XG4gICAgICBob21lID0gZW52KFBPU0lYX0hPTUUpO1xuICAgICAgcGF0aCA9IGpvaW4oXCJMaWJyYXJ5XCIsIFwiQ2FjaGVzXCIsIFwiZGVub1wiKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBcIndpbmRvd3NcIjpcbiAgICAgIGhvbWUgPSBlbnYoXCJMT0NBTEFQUERBVEFcIik7XG4gICAgICBob21lID0gaG9tZSA/PyBlbnYoXCJVU0VSUFJPRklMRVwiKTtcbiAgICAgIHBhdGggPSBcImRlbm9cIjtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcGF0aCA9IGhvbWUgPyBwYXRoIDogXCIuZGVub1wiO1xuICBpZiAoIWhvbWUpIHJldHVybiBwYXRoO1xuICByZXR1cm4gcmVzb2x2ZShqb2luKGhvbWUsIHBhdGgpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRtcGRpcigpOiBzdHJpbmcge1xuICBjb25zdCBlbnYgPSBEZW5vLmVudi5nZXQ7XG4gIGNvbnN0IG9zID0gRGVuby5idWlsZC5vcztcblxuICBjb25zdCB0bXAgPSBlbnYoXCJUTVBESVJcIikgPz8gZW52KFwiVEVNUFwiKSA/PyBlbnYoXCJUTVBcIik7XG4gIGlmICh0bXApIHJldHVybiByZXNvbHZlKHRtcCk7XG5cbiAgc3dpdGNoIChvcykge1xuICAgIGNhc2UgXCJsaW51eFwiOlxuICAgIGNhc2UgXCJkYXJ3aW5cIjpcbiAgICAgIHJldHVybiByZXNvbHZlKFwiL3RtcFwiKTtcbiAgICBjYXNlIFwid2luZG93c1wiOlxuICAgICAgcmV0dXJuIHJlc29sdmUoXG4gICAgICAgIGpvaW4oZW52KFwiSE9NRURSSVZFXCIpID8/IGVudihcIlNZU1RFTURSSVZFXCIpID8/IFwiQzpcIiwgXCJURU1QXCIpLFxuICAgICAgKTtcbiAgfVxufVxuIl19