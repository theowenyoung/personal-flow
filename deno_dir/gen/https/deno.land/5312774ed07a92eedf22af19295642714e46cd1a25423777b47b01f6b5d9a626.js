export function fmtFileSize(bytes, bit = false, dp = 2) {
    const thresh = bit ? 1000 : 1024;
    if (bytes <= 0) {
        return '0 B';
    }
    if (Math.abs(bytes) < thresh) {
        return bytes + ' B';
    }
    const units = bit
        ? ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
    let u = -1;
    const r = 10 ** dp;
    do {
        bytes /= thresh;
        ++u;
    } while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);
    return `${bytes.toFixed(dp)} ${units[u]}`;
}
export const isStr = (arg) => typeof arg === 'string';
export const exists = async (filename) => {
    try {
        await Deno.stat(filename);
        return true;
    }
    catch (e) {
        return false;
    }
};
export const fileExt = (fname) => fname.slice((fname.lastIndexOf('.') - 1 >>> 0) + 2);
export const trimPath = (path) => {
    if (/\/$/.test(path))
        path = path.slice(0, -1);
    if (/^\.\//.test(path))
        path = path.slice(2);
    return path;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFZQSxNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQWEsRUFBRSxNQUFlLEtBQUssRUFBRSxLQUFhLENBQUM7SUFDN0UsTUFBTSxNQUFNLEdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN6QyxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQUU7UUFDZCxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sRUFBRTtRQUM1QixPQUFPLEtBQUssR0FBRyxJQUFJLENBQUM7S0FDckI7SUFDRCxNQUFNLEtBQUssR0FBRyxHQUFHO1FBQ2YsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDWCxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUUsRUFBRSxDQUFDO0lBQ2pCLEdBQUc7UUFDRCxLQUFLLElBQUksTUFBTSxDQUFDO1FBQ2hCLEVBQUUsQ0FBQyxDQUFDO0tBQ0wsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLE1BQU0sSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7SUFDaEYsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDNUMsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQVEsRUFBVyxFQUFFLENBQUMsT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDO0FBR3BFLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxLQUFLLEVBQUUsUUFBZ0IsRUFBb0IsRUFBRTtJQUNqRSxJQUFJO1FBQ0YsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFCLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7QUFDSCxDQUFDLENBQUE7QUFHRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxLQUFhLEVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUd0RyxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxJQUFZLEVBQVUsRUFBRTtJQUUvQyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFL0MsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUFFLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAYXV0aG9yOiBsZW5jeFxuICogQGNyZWF0ZV9hdDogSnVuIDE0LCAyMDIwXG4gKi9cblxuLyoqXG4gKiBAbWV0aG9kIGZtdEZpbGVTaXplXG4gKiBAcGFyYW0ge251bWJlcn0gYnl0ZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0cyAtIGVuYWJsZXMgYml0IHNpemVzLCBkZWZhdWx0IGlzIGBmYWxzZWBcbiAqIEBwYXJhbSB7bnVtYmVyfSBkcCAtIGRlY2ltYWwgcGxhY2UsIGRlZmF1bHQgaXMgYDJgXG4gKiBAc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNDIwMzUyL2NvbnZlcnRpbmctZmlsZS1zaXplLWluLWJ5dGVzLXRvLWh1bWFuLXJlYWRhYmxlLXN0cmluZy8xMDQyMDQwNFxuICovXG5leHBvcnQgZnVuY3Rpb24gZm10RmlsZVNpemUoYnl0ZXM6IG51bWJlciwgYml0OiBib29sZWFuID0gZmFsc2UsIGRwOiBudW1iZXIgPSAyKSB7XG4gIGNvbnN0IHRocmVzaDogbnVtYmVyID0gYml0ID8gMTAwMCA6IDEwMjQ7XG4gIGlmIChieXRlcyA8PSAwKSB7XG4gICAgcmV0dXJuICcwIEInO1xuICB9XG4gIGlmIChNYXRoLmFicyhieXRlcykgPCB0aHJlc2gpIHtcbiAgICByZXR1cm4gYnl0ZXMgKyAnIEInO1xuICB9XG4gIGNvbnN0IHVuaXRzID0gYml0XG4gICAgPyBbJ0tCJywgJ01CJywgJ0dCJywgJ1RCJywgJ1BCJywgJ0VCJywgJ1pCJywgJ1lCJ11cbiAgICA6IFsnS2lCJywgJ01pQicsICdHaUInLCAnVGlCJywgJ1BpQicsICdFaUInLCAnWmlCJywgJ1lpQiddO1xuICBsZXQgdSA9IC0xO1xuICBjb25zdCByID0gMTAqKmRwO1xuICBkbyB7XG4gICAgYnl0ZXMgLz0gdGhyZXNoO1xuICAgICsrdTtcbiAgfSB3aGlsZSAoTWF0aC5yb3VuZChNYXRoLmFicyhieXRlcykgKiByKSAvIHIgPj0gdGhyZXNoICYmIHUgPCB1bml0cy5sZW5ndGggLSAxKTtcbiAgcmV0dXJuIGAke2J5dGVzLnRvRml4ZWQoZHApfSAke3VuaXRzW3VdfWA7XG59XG5cbmV4cG9ydCBjb25zdCBpc1N0ciA9IChhcmc6IGFueSk6IGJvb2xlYW4gPT4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG5cbi8vIGV4aXN0cyBkaXJlY3Rvcnkgb3IgZmlsZVxuZXhwb3J0IGNvbnN0IGV4aXN0cyA9IGFzeW5jIChmaWxlbmFtZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiA9PiB7XG4gIHRyeSB7XG4gICAgYXdhaXQgRGVuby5zdGF0KGZpbGVuYW1lKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xOTA4NTIvaG93LWNhbi1pLWdldC1maWxlLWV4dGVuc2lvbnMtd2l0aC1qYXZhc2NyaXB0XG5leHBvcnQgY29uc3QgZmlsZUV4dCA9IChmbmFtZTogc3RyaW5nKTogc3RyaW5nID0+IGZuYW1lLnNsaWNlKChmbmFtZS5sYXN0SW5kZXhPZignLicpIC0gMSA+Pj4gMCkgKyAyKTtcblxuLy8gZXhhbXBsZTogJy4vYS9iLycgPT4gJ2EvYidcbmV4cG9ydCBjb25zdCB0cmltUGF0aCA9IChwYXRoOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAvLyBleGFtcGxlOiAnLi9hL2IvJyA9PiAnLi9hL2InXG4gIGlmICgvXFwvJC8udGVzdChwYXRoKSkgcGF0aCA9IHBhdGguc2xpY2UoMCwgLTEpO1xuICAvLyBleGFtcGxlOiAnLi9hL2InID0+ICdhL2InXG4gIGlmICgvXlxcLlxcLy8udGVzdChwYXRoKSkgcGF0aCA9IHBhdGguc2xpY2UoMik7XG4gIHJldHVybiBwYXRoO1xufVxuIl19