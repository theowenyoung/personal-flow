import { bgGreen, bgWhite, } from "https://deno.land/std@0.74.0/fmt/colors.ts";
const isTTY = Deno.isatty(Deno.stdout.rid);
const isWindow = Deno.build.os === "windows";
var Direction;
(function (Direction) {
    Direction[Direction["left"] = 0] = "left";
    Direction[Direction["right"] = 1] = "right";
    Direction[Direction["all"] = 2] = "all";
})(Direction || (Direction = {}));
export default class ProgressBar {
    title;
    total;
    width;
    complete;
    preciseBar;
    incomplete;
    clear;
    interval;
    display;
    isCompleted = false;
    lastStr = "";
    start = Date.now();
    time;
    lastRender = 0;
    encoder = new TextEncoder();
    constructor({ title = "", total, width = 50, complete = bgGreen(" "), preciseBar = [], incomplete = bgWhite(" "), clear = false, interval, display, } = {}) {
        this.title = title;
        this.total = total;
        this.width = width;
        this.complete = complete;
        this.preciseBar = preciseBar.concat(complete);
        this.incomplete = incomplete;
        this.clear = clear;
        this.interval = interval ?? 16;
        this.display = display ?? ":title :percent :bar :time :completed/:total";
    }
    render(completed, options = {}) {
        if (!isTTY)
            return;
        completed = +completed;
        if (!Number.isInteger(completed)) {
            throw new Error(`completed must be 'number'`);
        }
        if (completed < 0) {
            throw new Error(`completed must greater than or equal to 0`);
        }
        const total = options.total ?? this.total;
        if (total === undefined)
            throw new Error(`total required`);
        if (!Number.isInteger(total))
            throw new Error(`total must be 'number'`);
        if (this.isCompleted)
            console.warn("Called after the end");
        const now = Date.now();
        const ms = now - this.lastRender;
        if (ms < this.interval && completed < total)
            return;
        this.lastRender = now;
        this.time = ((now - this.start) / 1000).toFixed(1) + "s";
        const percent = ((completed / total) * 100).toFixed(2) + "%";
        let str = this.display
            .replace(":title", options.title ?? this.title)
            .replace(":time", this.time)
            .replace(":percent", percent)
            .replace(":completed", completed + "")
            .replace(":total", total + "");
        let availableSpace = Math.max(0, this.ttyColumns - str.replace(":bar", "").length);
        if (availableSpace && isWindow)
            availableSpace -= 1;
        const width = Math.min(this.width, availableSpace);
        const finished = completed >= total;
        const preciseBar = options.preciseBar ?? this.preciseBar;
        const precision = preciseBar.length > 1;
        const completeLength = width * completed / total;
        const roundedCompleteLength = Math.floor(completeLength);
        let precise = "";
        if (precision) {
            const preciseLength = completeLength - roundedCompleteLength;
            precise = finished
                ? ""
                : preciseBar[Math.floor(preciseBar.length * preciseLength)];
        }
        const complete = new Array(roundedCompleteLength).fill(options.complete ?? this.complete).join("");
        const incomplete = new Array(Math.max(width - roundedCompleteLength - (precision ? 1 : 0), 0)).fill(options.incomplete ?? this.incomplete).join("");
        str = str.replace(":bar", complete + precise + incomplete);
        if (str !== this.lastStr) {
            this.write(str);
            this.lastStr = str;
        }
        if (finished)
            this.end();
    }
    end() {
        this.isCompleted = true;
        if (this.clear) {
            this.stdoutWrite("\r");
            this.clearLine();
        }
        else {
            this.breakLine();
        }
        this.showCursor();
    }
    console(message) {
        this.clearLine();
        this.write(`${message}`);
        this.breakLine();
        this.write(this.lastStr);
    }
    write(msg) {
        msg = `\r${msg}\x1b[?25l`;
        this.stdoutWrite(msg);
    }
    get ttyColumns() {
        return 100;
    }
    breakLine() {
        this.stdoutWrite("\r\n");
    }
    stdoutWrite(msg) {
        Deno.writeAllSync(Deno.stdout, this.encoder.encode(msg));
    }
    clearLine(direction = Direction.all) {
        switch (direction) {
            case Direction.all:
                this.stdoutWrite("\x1b[2K");
                break;
            case Direction.left:
                this.stdoutWrite("\x1b[1K");
                break;
            case Direction.right:
                this.stdoutWrite("\x1b[0K");
                break;
        }
    }
    showCursor() {
        this.stdoutWrite("\x1b[?25h");
    }
}
//# sourceMappingURL=data:application/json;base64,