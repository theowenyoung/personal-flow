import { cac, getStdin, version } from "./deps.ts";
import { run } from "./core/run-workflows.ts";
function main() {
    const cli = cac("denoflow");
    cli
        .command("run [...files or url]", "Run workflows")
        .option("--force", "Force run workflow files, if true, will ignore to read/save state").option("--debug", "Debug mode, will print more info").option("--database", "Database uri, default json://data").option("--limit", "max items for workflow every runs").option("--sleep", "sleep time between sources, filter, steps, unit seconds").option("--stdin", "read yaml file from stdin, e.g. cat test.yml | denoflow run --stdin")
        .action(async (files, options) => {
        console.log("Denoflow version: ", version);
        let content;
        if (options.stdin) {
            content = await getStdin({ exitOnEnter: false });
        }
        await run({
            ...options,
            content: content,
            files: files,
        });
    });
    cli
        .command("[SUB COMMAND] [...files] [OPTIONS]", "")
        .action(() => {
        cli.outputHelp();
    });
    cli.help();
    cli.version(version);
    cli.parse();
}
if (import.meta.main) {
    main();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2xpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFOUMsU0FBUyxJQUFJO0lBQ1gsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVCLEdBQUc7U0FDQSxPQUFPLENBQUMsdUJBQXVCLEVBQUUsZUFBZSxDQUFDO1NBQ2pELE1BQU0sQ0FDTCxTQUFTLEVBQ1QsbUVBQW1FLENBQ3BFLENBQUMsTUFBTSxDQUNOLFNBQVMsRUFDVCxrQ0FBa0MsQ0FDbkMsQ0FBQyxNQUFNLENBQ04sWUFBWSxFQUNaLG1DQUFtQyxDQUNwQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsbUNBQW1DLENBQUMsQ0FBQyxNQUFNLENBQzdELFNBQVMsRUFDVCx5REFBeUQsQ0FDMUQsQ0FBQyxNQUFNLENBQ04sU0FBUyxFQUNULHFFQUFxRSxDQUN0RTtTQUNBLE1BQU0sQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFO1FBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDM0MsSUFBSSxPQUEyQixDQUFDO1FBQ2hDLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtZQUNqQixPQUFPLEdBQUcsTUFBTSxRQUFRLENBQUMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUNsRDtRQUNELE1BQU0sR0FBRyxDQUFDO1lBQ1IsR0FBRyxPQUFPO1lBQ1YsT0FBTyxFQUFFLE9BQU87WUFDaEIsS0FBSyxFQUFFLEtBQUs7U0FDYixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUdMLEdBQUc7U0FFQSxPQUFPLENBQUMsb0NBQW9DLEVBQUUsRUFBRSxDQUFDO1NBQ2pELE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDWCxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFFTCxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7SUFHWCxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXJCLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNkLENBQUM7QUFFRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO0lBQ3BCLElBQUksRUFBRSxDQUFDO0NBQ1IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWMsIGdldFN0ZGluLCB2ZXJzaW9uIH0gZnJvbSBcIi4vZGVwcy50c1wiO1xuaW1wb3J0IHsgcnVuIH0gZnJvbSBcIi4vY29yZS9ydW4td29ya2Zsb3dzLnRzXCI7XG5cbmZ1bmN0aW9uIG1haW4oKSB7XG4gIGNvbnN0IGNsaSA9IGNhYyhcImRlbm9mbG93XCIpO1xuICBjbGlcbiAgICAuY29tbWFuZChcInJ1biBbLi4uZmlsZXMgb3IgdXJsXVwiLCBcIlJ1biB3b3JrZmxvd3NcIilcbiAgICAub3B0aW9uKFxuICAgICAgXCItLWZvcmNlXCIsXG4gICAgICBcIkZvcmNlIHJ1biB3b3JrZmxvdyBmaWxlcywgaWYgdHJ1ZSwgd2lsbCBpZ25vcmUgdG8gcmVhZC9zYXZlIHN0YXRlXCIsXG4gICAgKS5vcHRpb24oXG4gICAgICBcIi0tZGVidWdcIixcbiAgICAgIFwiRGVidWcgbW9kZSwgd2lsbCBwcmludCBtb3JlIGluZm9cIixcbiAgICApLm9wdGlvbihcbiAgICAgIFwiLS1kYXRhYmFzZVwiLFxuICAgICAgXCJEYXRhYmFzZSB1cmksIGRlZmF1bHQganNvbjovL2RhdGFcIixcbiAgICApLm9wdGlvbihcIi0tbGltaXRcIiwgXCJtYXggaXRlbXMgZm9yIHdvcmtmbG93IGV2ZXJ5IHJ1bnNcIikub3B0aW9uKFxuICAgICAgXCItLXNsZWVwXCIsXG4gICAgICBcInNsZWVwIHRpbWUgYmV0d2VlbiBzb3VyY2VzLCBmaWx0ZXIsIHN0ZXBzLCB1bml0IHNlY29uZHNcIixcbiAgICApLm9wdGlvbihcbiAgICAgIFwiLS1zdGRpblwiLFxuICAgICAgXCJyZWFkIHlhbWwgZmlsZSBmcm9tIHN0ZGluLCBlLmcuIGNhdCB0ZXN0LnltbCB8IGRlbm9mbG93IHJ1biAtLXN0ZGluXCIsXG4gICAgKVxuICAgIC5hY3Rpb24oYXN5bmMgKGZpbGVzLCBvcHRpb25zKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcIkRlbm9mbG93IHZlcnNpb246IFwiLCB2ZXJzaW9uKTtcbiAgICAgIGxldCBjb250ZW50OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgICBpZiAob3B0aW9ucy5zdGRpbikge1xuICAgICAgICBjb250ZW50ID0gYXdhaXQgZ2V0U3RkaW4oeyBleGl0T25FbnRlcjogZmFsc2UgfSk7XG4gICAgICB9XG4gICAgICBhd2FpdCBydW4oe1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgICBmaWxlczogZmlsZXMsXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAvLyBkZWZhdWx0IGNvbW1hbmRcbiAgY2xpXG4gICAgLy8gU2ltcGx5IG9taXQgdGhlIGNvbW1hbmQgbmFtZSwganVzdCBicmFja2V0c1xuICAgIC5jb21tYW5kKFwiW1NVQiBDT01NQU5EXSBbLi4uZmlsZXNdIFtPUFRJT05TXVwiLCBcIlwiKVxuICAgIC5hY3Rpb24oKCkgPT4ge1xuICAgICAgY2xpLm91dHB1dEhlbHAoKTtcbiAgICB9KTtcblxuICBjbGkuaGVscCgpO1xuICAvLyBEaXNwbGF5IHZlcnNpb24gbnVtYmVyIHdoZW4gYC12YCBvciBgLS12ZXJzaW9uYCBhcHBlYXJzXG4gIC8vIEl0J3MgYWxzbyB1c2VkIGluIGhlbHAgbWVzc2FnZVxuICBjbGkudmVyc2lvbih2ZXJzaW9uKTtcblxuICBjbGkucGFyc2UoKTtcbn1cblxuaWYgKGltcG9ydC5tZXRhLm1haW4pIHtcbiAgbWFpbigpO1xufVxuIl19