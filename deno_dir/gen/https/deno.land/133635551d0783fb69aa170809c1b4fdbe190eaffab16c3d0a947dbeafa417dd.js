import * as tools from './tools.ts';
export { tools };
export function makeHackle(options = {}) {
    const stringify = options.stringify || tools.defaultStringify;
    const rejectDefaultScopes = options.rejectDefaultScopes || false;
    const rawScopes = options.additionalScopes || [];
    let logLevel = options.defaultLogLevel || 'debug';
    let loggers = options.loggers || [tools.consoleLogger];
    if (!rejectDefaultScopes)
        rawScopes.unshift(...tools.defaultScopes);
    const scopes = new Map();
    const logStorage = new Map();
    rawScopes.forEach(scope => scopes.set(scope.name, scope));
    function log(scopeName, message) {
        if (!logLevel)
            return;
        const scope = scopes.get(scopeName);
        if (scope === undefined)
            throw new Error(`No scope has been set for '${scopeName}'`);
        const levelMap = {
            error: 5,
            warn: 4,
            notice: 3,
            info: 2,
            debug: 1,
        };
        if (levelMap[scope.level] < levelMap[logLevel])
            return;
        let prettyMessage = ``;
        const defaultProcedure = () => {
            if (scope.prepend)
                message = [scope.prepend, ...message];
            if (scope.append)
                message = [...message, scope.append];
            prettyMessage = stringify(message);
        };
        if (scope.messageMap) {
            const res = scope.messageMap(message);
            if (typeof res === 'string')
                prettyMessage = res;
            else {
                message = res;
                defaultProcedure();
            }
        }
        else
            defaultProcedure();
        if (scope.storeLogs) {
            const previousLogs = logStorage.get(scope.name);
            logStorage.set(scope.name, previousLogs ? [...previousLogs, prettyMessage] : [prettyMessage]);
        }
        loggers.forEach(logger => logger(prettyMessage, scope.level));
    }
    function critical(...message) {
        error(...message);
        if (Deno)
            return Deno.exit();
        else
            throw new Error(`A critical error was encountered`);
    }
    function error(...message) {
        scope('default-error')(...message);
    }
    function warn(...message) {
        scope('default-warn')(...message);
    }
    function notice(...message) {
        scope('default-notice')(...message);
    }
    function info(...message) {
        scope('default-info')(...message);
    }
    function debug(...message) {
        scope('default-debug')(...message);
    }
    function logStack() {
        scope('default-stack')();
    }
    function setLogLevel(level) {
        logLevel = level;
    }
    function setRawLogLevel(level) {
        if (level === 'none')
            setLogLevel(null);
        else if (level === 'error')
            setLogLevel('error');
        else if (level === 'warn')
            setLogLevel('warn');
        else if (level === 'notice')
            setLogLevel('notice');
        else if (level === 'info')
            setLogLevel('info');
        else if (level === 'debug')
            setLogLevel('debug');
        else if (typeof level === 'string')
            error(`An invalid log level was received.  '${level}' is not one of the valid log levels: 'none', 'error', 'warn', 'notice', 'info', and 'debug'.`);
    }
    function addScope(scope) {
        scopes.set(scope.name, scope);
    }
    function scope(scopeName) {
        return (...message) => {
            log(scopeName, message);
        };
    }
    function currentScopes() {
        return Array.from(scopes.values());
    }
    function removeDefaultScopes() {
        Object.values(tools.defaultScopes)
            .map(scope => scope.name)
            .forEach(name => scopes.delete(name));
    }
    function getLogsOnScope(scopeName) {
        return logStorage.get(scopeName) || null;
    }
    function setLoggers(newLoggers) {
        loggers = newLoggers;
    }
    return {
        critical,
        error,
        warn,
        notice,
        info,
        debug,
        logStack,
        setLogLevel,
        setRawLogLevel,
        addScope,
        scope,
        currentScopes,
        removeDefaultScopes,
        getLogsOnScope,
        setLoggers,
    };
}
//# sourceMappingURL=data:application/json;base64,