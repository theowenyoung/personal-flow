import { AtomFields } from "../types/fields/mod.ts";
import { resolveDublinCoreField } from "./dublin_core_resolver.ts";
export const resolveAtomField = (name) => {
    const result = {
        name,
        isHandled: true,
        isArray: false,
        isInt: false,
        isFloat: false,
        isDate: false,
    };
    switch (name) {
        case AtomFields.Category:
            result.name = "categories";
            result.isArray = true;
            break;
        case AtomFields.Contributor:
            result.name = "contributors";
            result.isArray = true;
            break;
        case AtomFields.Link:
            result.name = "links";
            result.isArray = true;
            break;
        case AtomFields.Entry:
            result.name = "entries";
            result.isArray = true;
            break;
        case AtomFields.Updated:
        case AtomFields.Published:
            result.isDate = true;
            break;
        default:
            const resolverResult = resolveDublinCoreField(name);
            if (resolverResult.isHandled) {
                if (resolverResult.isArray) {
                    result.isArray = true;
                }
                if (resolverResult.isDate) {
                    result.isDate = true;
                }
                if (resolverResult.isInt) {
                    result.isInt = true;
                }
                if (resolverResult.isFloat) {
                    result.isFloat = true;
                }
                result.name = resolverResult.name;
            }
            break;
    }
    return result;
};
export const isAtomCDataField = (nodeName) => {
    switch (nodeName) {
        case AtomFields.Title:
        case AtomFields.Summary:
        case AtomFields.Content:
        case AtomFields.Rights:
            return true;
    }
    return false;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXRvbV9yZXNvbHZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvcnNzQDAuNS41L3NyYy9yZXNvbHZlcnMvYXRvbV9yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDcEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFHbkUsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FDOUIsSUFBWSxFQUNJLEVBQUU7SUFDbEIsTUFBTSxNQUFNLEdBQUc7UUFDYixJQUFJO1FBQ0osU0FBUyxFQUFFLElBQUk7UUFDZixPQUFPLEVBQUUsS0FBSztRQUNkLEtBQUssRUFBRSxLQUFLO1FBQ1osT0FBTyxFQUFFLEtBQUs7UUFDZCxNQUFNLEVBQUUsS0FBSztLQUNJLENBQUM7SUFFcEIsUUFBUSxJQUFJLEVBQUU7UUFDWixLQUFLLFVBQVUsQ0FBQyxRQUFRO1lBQ3RCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLE1BQU07UUFDUixLQUFLLFVBQVUsQ0FBQyxXQUFXO1lBQ3pCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLE1BQU07UUFDUixLQUFLLFVBQVUsQ0FBQyxJQUFJO1lBQ2xCLE1BQU0sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDO1lBQ3RCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLE1BQU07UUFDUixLQUFLLFVBQVUsQ0FBQyxLQUFLO1lBQ25CLE1BQU0sQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO1lBQ3hCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3RCLE1BQU07UUFDUixLQUFLLFVBQVUsQ0FBQyxPQUFPLENBQUM7UUFDeEIsS0FBSyxVQUFVLENBQUMsU0FBUztZQUN2QixNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNyQixNQUFNO1FBQ1I7WUFDRSxNQUFNLGNBQWMsR0FBRyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNwRCxJQUFJLGNBQWMsQ0FBQyxTQUFTLEVBQUU7Z0JBQzVCLElBQUksY0FBYyxDQUFDLE9BQU8sRUFBRTtvQkFDMUIsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7aUJBQ3ZCO2dCQUVELElBQUksY0FBYyxDQUFDLE1BQU0sRUFBRTtvQkFDekIsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7aUJBQ3RCO2dCQUVELElBQUksY0FBYyxDQUFDLEtBQUssRUFBRTtvQkFDeEIsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7aUJBQ3JCO2dCQUVELElBQUksY0FBYyxDQUFDLE9BQU8sRUFBRTtvQkFDMUIsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7aUJBQ3ZCO2dCQUVELE1BQU0sQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQzthQUNuQztZQUNELE1BQU07S0FDVDtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsUUFBZ0IsRUFBVyxFQUFFO0lBQzVELFFBQVEsUUFBUSxFQUFFO1FBQ2hCLEtBQUssVUFBVSxDQUFDLEtBQUssQ0FBQztRQUN0QixLQUFLLFVBQVUsQ0FBQyxPQUFPLENBQUM7UUFDeEIsS0FBSyxVQUFVLENBQUMsT0FBTyxDQUFDO1FBQ3hCLEtBQUssVUFBVSxDQUFDLE1BQU07WUFDcEIsT0FBTyxJQUFJLENBQUM7S0FDZjtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXRvbUZpZWxkcyB9IGZyb20gXCIuLi90eXBlcy9maWVsZHMvbW9kLnRzXCI7XG5pbXBvcnQgeyByZXNvbHZlRHVibGluQ29yZUZpZWxkIH0gZnJvbSBcIi4vZHVibGluX2NvcmVfcmVzb2x2ZXIudHNcIjtcbmltcG9ydCB0eXBlIHsgUmVzb2x2ZXJSZXN1bHQgfSBmcm9tIFwiLi90eXBlcy9yZXNvbHZlcl9yZXN1bHQudHNcIjtcblxuZXhwb3J0IGNvbnN0IHJlc29sdmVBdG9tRmllbGQgPSAoXG4gIG5hbWU6IHN0cmluZyxcbik6IFJlc29sdmVyUmVzdWx0ID0+IHtcbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIG5hbWUsXG4gICAgaXNIYW5kbGVkOiB0cnVlLFxuICAgIGlzQXJyYXk6IGZhbHNlLFxuICAgIGlzSW50OiBmYWxzZSxcbiAgICBpc0Zsb2F0OiBmYWxzZSxcbiAgICBpc0RhdGU6IGZhbHNlLFxuICB9IGFzIFJlc29sdmVyUmVzdWx0O1xuXG4gIHN3aXRjaCAobmFtZSkge1xuICAgIGNhc2UgQXRvbUZpZWxkcy5DYXRlZ29yeTpcbiAgICAgIHJlc3VsdC5uYW1lID0gXCJjYXRlZ29yaWVzXCI7XG4gICAgICByZXN1bHQuaXNBcnJheSA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEF0b21GaWVsZHMuQ29udHJpYnV0b3I6XG4gICAgICByZXN1bHQubmFtZSA9IFwiY29udHJpYnV0b3JzXCI7XG4gICAgICByZXN1bHQuaXNBcnJheSA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEF0b21GaWVsZHMuTGluazpcbiAgICAgIHJlc3VsdC5uYW1lID0gXCJsaW5rc1wiO1xuICAgICAgcmVzdWx0LmlzQXJyYXkgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBdG9tRmllbGRzLkVudHJ5OlxuICAgICAgcmVzdWx0Lm5hbWUgPSBcImVudHJpZXNcIjtcbiAgICAgIHJlc3VsdC5pc0FycmF5ID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQXRvbUZpZWxkcy5VcGRhdGVkOlxuICAgIGNhc2UgQXRvbUZpZWxkcy5QdWJsaXNoZWQ6XG4gICAgICByZXN1bHQuaXNEYXRlID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBjb25zdCByZXNvbHZlclJlc3VsdCA9IHJlc29sdmVEdWJsaW5Db3JlRmllbGQobmFtZSk7XG4gICAgICBpZiAocmVzb2x2ZXJSZXN1bHQuaXNIYW5kbGVkKSB7XG4gICAgICAgIGlmIChyZXNvbHZlclJlc3VsdC5pc0FycmF5KSB7XG4gICAgICAgICAgcmVzdWx0LmlzQXJyYXkgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc29sdmVyUmVzdWx0LmlzRGF0ZSkge1xuICAgICAgICAgIHJlc3VsdC5pc0RhdGUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc29sdmVyUmVzdWx0LmlzSW50KSB7XG4gICAgICAgICAgcmVzdWx0LmlzSW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXNvbHZlclJlc3VsdC5pc0Zsb2F0KSB7XG4gICAgICAgICAgcmVzdWx0LmlzRmxvYXQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0Lm5hbWUgPSByZXNvbHZlclJlc3VsdC5uYW1lO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGNvbnN0IGlzQXRvbUNEYXRhRmllbGQgPSAobm9kZU5hbWU6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICBzd2l0Y2ggKG5vZGVOYW1lKSB7XG4gICAgY2FzZSBBdG9tRmllbGRzLlRpdGxlOlxuICAgIGNhc2UgQXRvbUZpZWxkcy5TdW1tYXJ5OlxuICAgIGNhc2UgQXRvbUZpZWxkcy5Db250ZW50OlxuICAgIGNhc2UgQXRvbUZpZWxkcy5SaWdodHM6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4iXX0=