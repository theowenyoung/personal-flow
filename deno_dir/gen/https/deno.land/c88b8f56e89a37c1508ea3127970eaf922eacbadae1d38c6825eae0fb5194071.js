import _JSZip from "https://dev.jspm.io/jszip@3.5.0";
import { ensureDir } from "https://deno.land/std@0.93.0/fs/ensure_dir.ts";
import { walk } from "https://deno.land/std@0.93.0/fs/walk.ts";
import { dirname, join, SEP } from "https://deno.land/std@0.93.0/path/mod.ts";
export async function readZip(path) {
    const z = new JSZip();
    const content = await Deno.readFile(path);
    await z.loadAsync(content);
    return z;
}
export async function zipDir(dir, options) {
    const z = new JSZip();
    const cwd = Deno.cwd();
    Deno.chdir(dir);
    try {
        for await (const f of walk(".", options)) {
            if (f.isDirectory) {
                continue;
            }
            const contents = await Deno.readFile(f.path);
            let ff = f.path.split(SEP);
            let zz = z;
            while (ff.length > 1) {
                zz = zz.folder(ff.shift());
            }
            zz.addFile(ff[0], contents);
        }
    }
    finally {
        Deno.chdir(cwd);
    }
    return z;
}
export class JSZip {
    _z;
    constructor(z) {
        if (z === undefined) {
            this._z = new _JSZip();
        }
        else {
            this._z = z;
        }
    }
    folder(name) {
        const f = this._z.folder(name);
        return new JSZip(f);
    }
    file(path) {
        const f = this._z.file(path);
        return f;
    }
    addFile(path, content, options) {
        const f = this._z.file(path, content, options);
        return f;
    }
    files() {
        const fs = this._z.files;
        return fs;
    }
    async generateAsync(options) {
        return await this._z.generateAsync(options);
    }
    filter(predicate) {
        return this._z.filter(predicate);
    }
    remove(path) {
        return this._z.remove(path);
    }
    async loadAsync(data, options) {
        return this._z.loadAsync(data, options);
    }
    async writeZip(path) {
        const b = await this.generateAsync({ type: "uint8array" });
        return await Deno.writeFile(path, b);
    }
    async unzip(dir = ".") {
        for (const f of this) {
            const ff = join(dir, f.name);
            if (f.dir) {
                await Deno.mkdir(ff, { recursive: true });
                continue;
            }
            const content = await f.async("uint8array");
            await ensureDir(dirname(ff));
            await Deno.writeFile(ff, content);
        }
    }
    *[Symbol.iterator]() {
        yield* Object.values(this.files());
    }
}
//# sourceMappingURL=data:application/json;base64,