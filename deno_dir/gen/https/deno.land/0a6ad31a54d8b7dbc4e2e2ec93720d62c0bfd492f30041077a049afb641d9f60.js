import { Adapters } from "./adapter.ts";
import { JSONB } from "./jsonb.ts";
import { MemoryAdapter } from "./memory.ts";
function tryParseURL(q) {
    try {
        return new URL(q);
    }
    catch (e) {
        return;
    }
}
export class Keydb {
    adapter;
    awaitReady;
    namespace = "";
    serialize = JSONB.stringify;
    deserialize = JSONB.parse;
    ttl;
    constructor(adapter = new MemoryAdapter(), options) {
        this.adapter = typeof adapter === "object" ? adapter : undefined;
        if (this.adapter === undefined && typeof adapter !== "object") {
            const proto = tryParseURL(adapter);
            if (!proto)
                throw new Error("Invalid Adapter Connection URI");
            const protocol = proto.protocol;
            const adp = Adapters.get(protocol.substr(0, protocol.length - 1));
            if (!adp)
                throw new Error(`Adapter not found for Protocol: ${protocol}`);
            const res = adp.init(proto);
            if (res instanceof Promise) {
                this.awaitReady = res.then((a) => {
                    this.adapter = a;
                    this.awaitReady = undefined;
                    return a;
                });
            }
            else
                this.adapter = res;
        }
        this.namespace = options?.namespace ?? "";
        if (options?.serialize)
            this.serialize = options.serialize;
        if (options?.deserialize)
            this.deserialize = options.deserialize;
        if (options?.ttl)
            this.ttl = options.ttl;
    }
    async get(key) {
        if (this.awaitReady)
            await this.awaitReady;
        await this.adapter?.deleteExpired(this.namespace);
        const val = await this.adapter?.get(key, this.namespace);
        if (val == undefined)
            return undefined;
        const res = this.deserialize(val.value);
        return res;
    }
    async set(key, value, ttl) {
        if (this.awaitReady)
            await this.awaitReady;
        const _ttl = ttl ?? this.ttl;
        value = {
            value,
            ttl: _ttl && typeof _ttl === "number" ? Date.now() + _ttl : undefined,
        };
        await this.adapter?.set(key, this.serialize(value.value), this.namespace, value.ttl);
        return this;
    }
    async delete(key) {
        if (this.awaitReady)
            await this.awaitReady;
        return (await this.adapter?.delete(key, this.namespace)) ?? false;
    }
    async clear() {
        if (this.awaitReady)
            await this.awaitReady;
        await this.adapter?.clear(this.namespace);
        return this;
    }
    async keys() {
        if (this.awaitReady)
            await this.awaitReady;
        await this.adapter?.deleteExpired(this.namespace);
        const keys = (await this.adapter?.keys(this.namespace)) ?? [];
        return keys;
    }
}
//# sourceMappingURL=data:application/json;base64,