import { bold, gray, green, log, red, yellow } from "../deps.ts";
export class ReportHandler extends log.handlers.BaseHandler {
    format(logRecord) {
        const msg = super.format(logRecord);
        return msg;
    }
    log(msg) {
        console.log(msg);
    }
}
await log.setup({
    handlers: {
        default: new ReportHandler("INFO", {
            formatter: msgFormatter,
        }),
    },
    loggers: {
        default: {
            handlers: ["default"],
            level: "INFO",
        },
    },
});
export function getReporter(name, debug) {
    const reporter = log.getLogger(name);
    reporter.level = debug ? log.LogLevels.DEBUG : log.LogLevels.INFO;
    reporter.handlers = [
        new ReportHandler("DEBUG", {
            formatter: msgFormatter,
        }),
    ];
    return reporter;
}
export default log.getLogger();
function msgFormatter(logRecord) {
    const { loggerName, msg, level, } = logRecord;
    let finalMsg = "";
    let loggerNameFormated = `[${loggerName}]`;
    if (loggerName === "default") {
        loggerNameFormated = "";
    }
    if (loggerNameFormated) {
        loggerNameFormated = gray(loggerNameFormated);
    }
    if (logRecord.args.length > 0 && typeof logRecord.args[0] === "string") {
        finalMsg += `${formatMsgColor(level, logRecord.args[0])} `;
        finalMsg += `${msg} ${loggerNameFormated}`;
    }
    else {
        finalMsg += `${msg} ${loggerNameFormated}`;
        logRecord.args.forEach((arg, index) => {
            finalMsg += `, arg${index}: ${arg}`;
        });
        finalMsg = formatMsgColor(level, finalMsg);
    }
    return finalMsg;
}
export function formatMsgColor(level, msg) {
    switch (level) {
        case log.LogLevels.DEBUG:
            msg = green(msg);
            break;
        case log.LogLevels.INFO:
            msg = green(msg);
            break;
        case log.LogLevels.WARNING:
            msg = yellow(msg);
            break;
        case log.LogLevels.ERROR:
            msg = red(msg);
            break;
        case log.LogLevels.CRITICAL:
            msg = bold(red(msg));
            break;
        default:
            break;
    }
    return msg;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicmVwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNqRSxNQUFNLE9BQU8sYUFBYyxTQUFRLEdBQUcsQ0FBQyxRQUFRLENBQUMsV0FBVztJQUN6RCxNQUFNLENBQUMsU0FBd0I7UUFDN0IsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwQyxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBVztRQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkIsQ0FBQztDQUNGO0FBQ0QsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQ2QsUUFBUSxFQUFFO1FBQ1IsT0FBTyxFQUFFLElBQUksYUFBYSxDQUFDLE1BQU0sRUFBRTtZQUNqQyxTQUFTLEVBQUUsWUFBWTtTQUN4QixDQUFDO0tBQ0g7SUFFRCxPQUFPLEVBQUU7UUFFUCxPQUFPLEVBQUU7WUFDUCxRQUFRLEVBQUUsQ0FBQyxTQUFTLENBQUM7WUFDckIsS0FBSyxFQUFFLE1BQU07U0FDZDtLQUNGO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsTUFBTSxVQUFVLFdBQVcsQ0FDekIsSUFBWSxFQUNaLEtBQWM7SUFFZCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXJDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7SUFDbEUsUUFBUSxDQUFDLFFBQVEsR0FBRztRQUNsQixJQUFJLGFBQWEsQ0FBQyxPQUFPLEVBQUU7WUFDekIsU0FBUyxFQUFFLFlBQVk7U0FDeEIsQ0FBQztLQUNILENBQUM7SUFDRixPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDO0FBQ0QsZUFBZSxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDL0IsU0FBUyxZQUFZLENBQUMsU0FBd0I7SUFDNUMsTUFBTSxFQUNKLFVBQVUsRUFDVixHQUFHLEVBQ0gsS0FBSyxHQUNOLEdBQUcsU0FBUyxDQUFDO0lBQ2QsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLElBQUksa0JBQWtCLEdBQUcsSUFBSSxVQUFVLEdBQUcsQ0FBQztJQUUzQyxJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7UUFDNUIsa0JBQWtCLEdBQUcsRUFBRSxDQUFDO0tBQ3pCO0lBQ0QsSUFBSSxrQkFBa0IsRUFBRTtRQUN0QixrQkFBa0IsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztLQUMvQztJQUNELElBQ0UsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQ2xFO1FBQ0EsUUFBUSxJQUFJLEdBQUcsY0FBYyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUUzRCxRQUFRLElBQUksR0FBRyxHQUFHLElBQUksa0JBQWtCLEVBQUUsQ0FBQztLQUM1QztTQUFNO1FBQ0wsUUFBUSxJQUFJLEdBQUcsR0FBRyxJQUFJLGtCQUFrQixFQUFFLENBQUM7UUFDM0MsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDcEMsUUFBUSxJQUFJLFFBQVEsS0FBSyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsUUFBUSxHQUFHLGNBQWMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDNUM7SUFFRCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxLQUFvQixFQUFFLEdBQVc7SUFDOUQsUUFBUSxLQUFLLEVBQUU7UUFDYixLQUFLLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSztZQUN0QixHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2pCLE1BQU07UUFDUixLQUFLLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSTtZQUNyQixHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2pCLE1BQU07UUFDUixLQUFLLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTztZQUN4QixHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE1BQU07UUFDUixLQUFLLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSztZQUN0QixHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2YsTUFBTTtRQUNSLEtBQUssR0FBRyxDQUFDLFNBQVMsQ0FBQyxRQUFRO1lBQ3pCLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDckIsTUFBTTtRQUNSO1lBQ0UsTUFBTTtLQUNUO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYm9sZCwgZ3JheSwgZ3JlZW4sIGxvZywgcmVkLCB5ZWxsb3cgfSBmcm9tIFwiLi4vZGVwcy50c1wiO1xuZXhwb3J0IGNsYXNzIFJlcG9ydEhhbmRsZXIgZXh0ZW5kcyBsb2cuaGFuZGxlcnMuQmFzZUhhbmRsZXIge1xuICBmb3JtYXQobG9nUmVjb3JkOiBsb2cuTG9nUmVjb3JkKTogc3RyaW5nIHtcbiAgICBjb25zdCBtc2cgPSBzdXBlci5mb3JtYXQobG9nUmVjb3JkKTtcbiAgICByZXR1cm4gbXNnO1xuICB9XG5cbiAgbG9nKG1zZzogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2cobXNnKTtcbiAgfVxufVxuYXdhaXQgbG9nLnNldHVwKHtcbiAgaGFuZGxlcnM6IHtcbiAgICBkZWZhdWx0OiBuZXcgUmVwb3J0SGFuZGxlcihcIklORk9cIiwge1xuICAgICAgZm9ybWF0dGVyOiBtc2dGb3JtYXR0ZXIsXG4gICAgfSksXG4gIH0sXG5cbiAgbG9nZ2Vyczoge1xuICAgIC8vIGNvbmZpZ3VyZSBkZWZhdWx0IGxvZ2dlciBhdmFpbGFibGUgdmlhIHNob3J0LWhhbmQgbWV0aG9kcyBhYm92ZS5cbiAgICBkZWZhdWx0OiB7XG4gICAgICBoYW5kbGVyczogW1wiZGVmYXVsdFwiXSxcbiAgICAgIGxldmVsOiBcIklORk9cIixcbiAgICB9LFxuICB9LFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZXBvcnRlcihcbiAgbmFtZTogc3RyaW5nLFxuICBkZWJ1ZzogYm9vbGVhbixcbik6IGxvZy5Mb2dnZXIge1xuICBjb25zdCByZXBvcnRlciA9IGxvZy5nZXRMb2dnZXIobmFtZSk7XG5cbiAgcmVwb3J0ZXIubGV2ZWwgPSBkZWJ1ZyA/IGxvZy5Mb2dMZXZlbHMuREVCVUcgOiBsb2cuTG9nTGV2ZWxzLklORk87XG4gIHJlcG9ydGVyLmhhbmRsZXJzID0gW1xuICAgIG5ldyBSZXBvcnRIYW5kbGVyKFwiREVCVUdcIiwge1xuICAgICAgZm9ybWF0dGVyOiBtc2dGb3JtYXR0ZXIsXG4gICAgfSksXG4gIF07XG4gIHJldHVybiByZXBvcnRlcjtcbn1cbmV4cG9ydCBkZWZhdWx0IGxvZy5nZXRMb2dnZXIoKTtcbmZ1bmN0aW9uIG1zZ0Zvcm1hdHRlcihsb2dSZWNvcmQ6IGxvZy5Mb2dSZWNvcmQpOiBzdHJpbmcge1xuICBjb25zdCB7XG4gICAgbG9nZ2VyTmFtZSxcbiAgICBtc2csXG4gICAgbGV2ZWwsXG4gIH0gPSBsb2dSZWNvcmQ7XG4gIGxldCBmaW5hbE1zZyA9IFwiXCI7XG4gIGxldCBsb2dnZXJOYW1lRm9ybWF0ZWQgPSBgWyR7bG9nZ2VyTmFtZX1dYDtcblxuICBpZiAobG9nZ2VyTmFtZSA9PT0gXCJkZWZhdWx0XCIpIHtcbiAgICBsb2dnZXJOYW1lRm9ybWF0ZWQgPSBcIlwiO1xuICB9XG4gIGlmIChsb2dnZXJOYW1lRm9ybWF0ZWQpIHtcbiAgICBsb2dnZXJOYW1lRm9ybWF0ZWQgPSBncmF5KGxvZ2dlck5hbWVGb3JtYXRlZCk7XG4gIH1cbiAgaWYgKFxuICAgIGxvZ1JlY29yZC5hcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGxvZ1JlY29yZC5hcmdzWzBdID09PSBcInN0cmluZ1wiXG4gICkge1xuICAgIGZpbmFsTXNnICs9IGAke2Zvcm1hdE1zZ0NvbG9yKGxldmVsLCBsb2dSZWNvcmQuYXJnc1swXSl9IGA7XG5cbiAgICBmaW5hbE1zZyArPSBgJHttc2d9ICR7bG9nZ2VyTmFtZUZvcm1hdGVkfWA7XG4gIH0gZWxzZSB7XG4gICAgZmluYWxNc2cgKz0gYCR7bXNnfSAke2xvZ2dlck5hbWVGb3JtYXRlZH1gO1xuICAgIGxvZ1JlY29yZC5hcmdzLmZvckVhY2goKGFyZywgaW5kZXgpID0+IHtcbiAgICAgIGZpbmFsTXNnICs9IGAsIGFyZyR7aW5kZXh9OiAke2FyZ31gO1xuICAgIH0pO1xuICAgIGZpbmFsTXNnID0gZm9ybWF0TXNnQ29sb3IobGV2ZWwsIGZpbmFsTXNnKTtcbiAgfVxuXG4gIHJldHVybiBmaW5hbE1zZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdE1zZ0NvbG9yKGxldmVsOiBsb2cuTG9nTGV2ZWxzLCBtc2c6IHN0cmluZyk6IHN0cmluZyB7XG4gIHN3aXRjaCAobGV2ZWwpIHtcbiAgICBjYXNlIGxvZy5Mb2dMZXZlbHMuREVCVUc6XG4gICAgICBtc2cgPSBncmVlbihtc2cpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBsb2cuTG9nTGV2ZWxzLklORk86XG4gICAgICBtc2cgPSBncmVlbihtc2cpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBsb2cuTG9nTGV2ZWxzLldBUk5JTkc6XG4gICAgICBtc2cgPSB5ZWxsb3cobXNnKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgbG9nLkxvZ0xldmVscy5FUlJPUjpcbiAgICAgIG1zZyA9IHJlZChtc2cpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBsb2cuTG9nTGV2ZWxzLkNSSVRJQ0FMOlxuICAgICAgbXNnID0gYm9sZChyZWQobXNnKSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIG1zZztcbn1cbiJdfQ==