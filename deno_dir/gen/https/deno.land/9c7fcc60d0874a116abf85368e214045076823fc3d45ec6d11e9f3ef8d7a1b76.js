const hexTable = new TextEncoder().encode("0123456789abcdef");
export function errInvalidByte(byte) {
    return new Error("encoding/hex: invalid byte: " +
        new TextDecoder().decode(new Uint8Array([byte])));
}
export function errLength() {
    return new Error("encoding/hex: odd length hex string");
}
function fromHexChar(byte) {
    if (48 <= byte && byte <= 57)
        return byte - 48;
    if (97 <= byte && byte <= 102)
        return byte - 97 + 10;
    if (65 <= byte && byte <= 70)
        return byte - 65 + 10;
    throw errInvalidByte(byte);
}
export function encodedLen(n) {
    return n * 2;
}
export function encode(src) {
    const dst = new Uint8Array(encodedLen(src.length));
    for (let i = 0; i < dst.length; i++) {
        const v = src[i];
        dst[i * 2] = hexTable[v >> 4];
        dst[i * 2 + 1] = hexTable[v & 0x0f];
    }
    return dst;
}
export function encodeToString(src) {
    return new TextDecoder().decode(encode(src));
}
export function decode(src) {
    const dst = new Uint8Array(decodedLen(src.length));
    for (let i = 0; i < dst.length; i++) {
        const a = fromHexChar(src[i * 2]);
        const b = fromHexChar(src[i * 2 + 1]);
        dst[i] = (a << 4) | b;
    }
    if (src.length % 2 == 1) {
        fromHexChar(src[dst.length * 2]);
        throw errLength();
    }
    return dst;
}
export function decodedLen(x) {
    return x >>> 1;
}
export function decodeString(s) {
    return decode(new TextEncoder().encode(s));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGV4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE1BQU0sUUFBUSxHQUFHLElBQUksV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFNOUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxJQUFZO0lBQ3pDLE9BQU8sSUFBSSxLQUFLLENBQ2QsOEJBQThCO1FBQzVCLElBQUksV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNuRCxDQUFDO0FBQ0osQ0FBQztBQUdELE1BQU0sVUFBVSxTQUFTO0lBQ3ZCLE9BQU8sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBR0QsU0FBUyxXQUFXLENBQUMsSUFBWTtJQUUvQixJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7UUFBRSxPQUFPLElBQUksR0FBRyxFQUFFLENBQUM7SUFFL0MsSUFBSSxFQUFFLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxHQUFHO1FBQUUsT0FBTyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztJQUVyRCxJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7UUFBRSxPQUFPLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBRXBELE1BQU0sY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFPRCxNQUFNLFVBQVUsVUFBVSxDQUFDLENBQVM7SUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2YsQ0FBQztBQU1ELE1BQU0sVUFBVSxNQUFNLENBQUMsR0FBZTtJQUNwQyxNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbkQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDbkMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM5QixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0tBQ3JDO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBTUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxHQUFlO0lBQzVDLE9BQU8sSUFBSSxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQVFELE1BQU0sVUFBVSxNQUFNLENBQUMsR0FBZTtJQUNwQyxNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbkQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDbkMsTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3ZCO0lBRUQsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFHdkIsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakMsTUFBTSxTQUFTLEVBQUUsQ0FBQztLQUNuQjtJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQU9ELE1BQU0sVUFBVSxVQUFVLENBQUMsQ0FBUztJQUNsQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakIsQ0FBQztBQVNELE1BQU0sVUFBVSxZQUFZLENBQUMsQ0FBUztJQUNwQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLFdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQb3J0ZWQgZnJvbSBHb1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby9ibG9iL2dvMS4xMi41L3NyYy9lbmNvZGluZy9oZXgvaGV4LmdvXG4vLyBDb3B5cmlnaHQgMjAwOSBUaGUgR28gQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlXG4vLyBsaWNlbnNlIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG4vLyBDb3B5cmlnaHQgMjAxOC0yMDIxIHRoZSBEZW5vIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIE1JVCBsaWNlbnNlLlxuXG5jb25zdCBoZXhUYWJsZSA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShcIjAxMjM0NTY3ODlhYmNkZWZcIik7XG5cbi8qKlxuICogRXJySW52YWxpZEJ5dGUgdGFrZXMgYW4gaW52YWxpZCBieXRlIGFuZCByZXR1cm5zIGFuIEVycm9yLlxuICogQHBhcmFtIGJ5dGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVyckludmFsaWRCeXRlKGJ5dGU6IG51bWJlcik6IEVycm9yIHtcbiAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICBcImVuY29kaW5nL2hleDogaW52YWxpZCBieXRlOiBcIiArXG4gICAgICBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoW2J5dGVdKSksXG4gICk7XG59XG5cbi8qKiBFcnJMZW5ndGggcmV0dXJucyBhbiBlcnJvciBhYm91dCBvZGQgc3RyaW5nIGxlbmd0aC4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlcnJMZW5ndGgoKTogRXJyb3Ige1xuICByZXR1cm4gbmV3IEVycm9yKFwiZW5jb2RpbmcvaGV4OiBvZGQgbGVuZ3RoIGhleCBzdHJpbmdcIik7XG59XG5cbi8vIGZyb21IZXhDaGFyIGNvbnZlcnRzIGEgaGV4IGNoYXJhY3RlciBpbnRvIGl0cyB2YWx1ZS5cbmZ1bmN0aW9uIGZyb21IZXhDaGFyKGJ5dGU6IG51bWJlcik6IG51bWJlciB7XG4gIC8vICcwJyA8PSBieXRlICYmIGJ5dGUgPD0gJzknXG4gIGlmICg0OCA8PSBieXRlICYmIGJ5dGUgPD0gNTcpIHJldHVybiBieXRlIC0gNDg7XG4gIC8vICdhJyA8PSBieXRlICYmIGJ5dGUgPD0gJ2YnXG4gIGlmICg5NyA8PSBieXRlICYmIGJ5dGUgPD0gMTAyKSByZXR1cm4gYnl0ZSAtIDk3ICsgMTA7XG4gIC8vICdBJyA8PSBieXRlICYmIGJ5dGUgPD0gJ0YnXG4gIGlmICg2NSA8PSBieXRlICYmIGJ5dGUgPD0gNzApIHJldHVybiBieXRlIC0gNjUgKyAxMDtcblxuICB0aHJvdyBlcnJJbnZhbGlkQnl0ZShieXRlKTtcbn1cblxuLyoqXG4gKiBFbmNvZGVkTGVuIHJldHVybnMgdGhlIGxlbmd0aCBvZiBhbiBlbmNvZGluZyBvZiBuIHNvdXJjZSBieXRlcy4gU3BlY2lmaWNhbGx5LFxuICogaXQgcmV0dXJucyBuICogMi5cbiAqIEBwYXJhbSBuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVkTGVuKG46IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiBuICogMjtcbn1cblxuLyoqXG4gKiBFbmNvZGUgZW5jb2RlcyBgc3JjYCBpbnRvIGBlbmNvZGVkTGVuKHNyYy5sZW5ndGgpYCBieXRlcy5cbiAqIEBwYXJhbSBzcmNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZShzcmM6IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5IHtcbiAgY29uc3QgZHN0ID0gbmV3IFVpbnQ4QXJyYXkoZW5jb2RlZExlbihzcmMubGVuZ3RoKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZHN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdiA9IHNyY1tpXTtcbiAgICBkc3RbaSAqIDJdID0gaGV4VGFibGVbdiA+PiA0XTtcbiAgICBkc3RbaSAqIDIgKyAxXSA9IGhleFRhYmxlW3YgJiAweDBmXTtcbiAgfVxuICByZXR1cm4gZHN0O1xufVxuXG4vKipcbiAqIEVuY29kZVRvU3RyaW5nIHJldHVybnMgdGhlIGhleGFkZWNpbWFsIGVuY29kaW5nIG9mIGBzcmNgLlxuICogQHBhcmFtIHNyY1xuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlVG9TdHJpbmcoc3JjOiBVaW50OEFycmF5KTogc3RyaW5nIHtcbiAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShlbmNvZGUoc3JjKSk7XG59XG5cbi8qKlxuICogRGVjb2RlIGRlY29kZXMgYHNyY2AgaW50byBgZGVjb2RlZExlbihzcmMubGVuZ3RoKWAgYnl0ZXNcbiAqIElmIHRoZSBpbnB1dCBpcyBtYWxmb3JtZWQgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd25cbiAqIHRoZSBlcnJvci5cbiAqIEBwYXJhbSBzcmNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZShzcmM6IFVpbnQ4QXJyYXkpOiBVaW50OEFycmF5IHtcbiAgY29uc3QgZHN0ID0gbmV3IFVpbnQ4QXJyYXkoZGVjb2RlZExlbihzcmMubGVuZ3RoKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZHN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYSA9IGZyb21IZXhDaGFyKHNyY1tpICogMl0pO1xuICAgIGNvbnN0IGIgPSBmcm9tSGV4Q2hhcihzcmNbaSAqIDIgKyAxXSk7XG4gICAgZHN0W2ldID0gKGEgPDwgNCkgfCBiO1xuICB9XG5cbiAgaWYgKHNyYy5sZW5ndGggJSAyID09IDEpIHtcbiAgICAvLyBDaGVjayBmb3IgaW52YWxpZCBjaGFyIGJlZm9yZSByZXBvcnRpbmcgYmFkIGxlbmd0aCxcbiAgICAvLyBzaW5jZSB0aGUgaW52YWxpZCBjaGFyIChpZiBwcmVzZW50KSBpcyBhbiBlYXJsaWVyIHByb2JsZW0uXG4gICAgZnJvbUhleENoYXIoc3JjW2RzdC5sZW5ndGggKiAyXSk7XG4gICAgdGhyb3cgZXJyTGVuZ3RoKCk7XG4gIH1cblxuICByZXR1cm4gZHN0O1xufVxuXG4vKipcbiAqIERlY29kZWRMZW4gcmV0dXJucyB0aGUgbGVuZ3RoIG9mIGRlY29kaW5nIGB4YCBzb3VyY2UgYnl0ZXMuXG4gKiBTcGVjaWZpY2FsbHksIGl0IHJldHVybnMgYHggLyAyYC5cbiAqIEBwYXJhbSB4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVkTGVuKHg6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiB4ID4+PiAxO1xufVxuXG4vKipcbiAqIERlY29kZVN0cmluZyByZXR1cm5zIHRoZSBieXRlcyByZXByZXNlbnRlZCBieSB0aGUgaGV4YWRlY2ltYWwgc3RyaW5nIGBzYC5cbiAqIERlY29kZVN0cmluZyBleHBlY3RzIHRoYXQgc3JjIGNvbnRhaW5zIG9ubHkgaGV4YWRlY2ltYWwgY2hhcmFjdGVycyBhbmQgdGhhdFxuICogc3JjIGhhcyBldmVuIGxlbmd0aC5cbiAqIElmIHRoZSBpbnB1dCBpcyBtYWxmb3JtZWQsIERlY29kZVN0cmluZyB3aWxsIHRocm93IGFuIGVycm9yLlxuICogQHBhcmFtIHMgdGhlIGBzdHJpbmdgIHRvIGRlY29kZSB0byBgVWludDhBcnJheWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVN0cmluZyhzOiBzdHJpbmcpOiBVaW50OEFycmF5IHtcbiAgcmV0dXJuIGRlY29kZShuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUocykpO1xufVxuIl19