import { get } from "./utils/get.ts";
export function getSourceItemUniqueKey(item, sourceIndex, sourceOptions) {
    const defaultKeysFields = [
        "id",
        "guid",
        "_id",
        "objectId",
        "objectID",
        "ID",
        "url",
        "link",
    ];
    const keyFields = sourceOptions.key
        ? [sourceOptions.key].concat(defaultKeysFields)
        : defaultKeysFields;
    let itemKey;
    for (let keyFieldIndex = 0; keyFieldIndex < keyFields.length; keyFieldIndex++) {
        const keyField = keyFields[keyFieldIndex];
        itemKey = get(item, keyField);
        if (typeof itemKey === "string") {
            break;
        }
    }
    const sourcePrefix = sourceOptions.id || sourceIndex;
    if (itemKey) {
        return `${sourcePrefix}${itemKey}`;
    }
    else {
        return undefined;
    }
}
export function getSourceItemsFromResult(ctx, sourceOptions) {
    const { reporter } = sourceOptions;
    const force = sourceOptions?.force;
    let items = ctx.public.result;
    if (sourceOptions.itemsPath) {
        items = get(ctx.public.result, sourceOptions.itemsPath);
    }
    if (!Array.isArray(items)) {
        throw new Error("source result must be an array, but got " + typeof items);
    }
    const finalItems = [];
    for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
        const item = items[itemIndex];
        const key = getSourceItemUniqueKey(item, ctx.public.sourceIndex, sourceOptions);
        if (key === undefined) {
            reporter.warning(`will be directly added to items`, "No unique key");
        }
        if (key !== undefined && ctx.internalState &&
            (ctx.internalState.keys || []).includes(key) &&
            !force) {
            reporter.debug(`${key}, cause it has been processed`, "Skip item");
            continue;
        }
        else if (key !== undefined && ctx.internalState &&
            (ctx.internalState.keys || []).includes(key) && force) {
            reporter.debug(`${key}, cause --force is true`, "Add processed item");
        }
        else if (force) {
            reporter.debug(`${key}`, "add item");
        }
        finalItems.push(item);
    }
    ctx.public.items = finalItems;
    return ctx;
}
export function filterCtxItems(ctx, filterOptions) {
    const { reporter } = filterOptions;
    const limit = filterOptions?.limit;
    const items = ctx.public.items;
    if (!Array.isArray(items)) {
        throw new Error("ctx.items must be an array, but got " + typeof items + ", filter failed");
    }
    reporter.debug(`Input ${items.length} items`);
    const finalItems = [];
    for (let i = 0; i < items.length; i++) {
        if (limit !== undefined && limit > 0 && finalItems.length >= limit) {
            break;
        }
        const item = items[i];
        finalItems.push(item);
    }
    ctx.public.items = finalItems;
    reporter.debug(`Output ${ctx.public.items.length} items`);
    return ctx;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXNvdXJjZS1pdGVtcy1mcm9tLXJlc3VsdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdldC1zb3VyY2UtaXRlbXMtZnJvbS1yZXN1bHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBU3JDLE1BQU0sVUFBVSxzQkFBc0IsQ0FDcEMsSUFBYSxFQUNiLFdBQW1CLEVBQ25CLGFBQTRCO0lBRTVCLE1BQU0saUJBQWlCLEdBQUc7UUFDeEIsSUFBSTtRQUNKLE1BQU07UUFDTixLQUFLO1FBQ0wsVUFBVTtRQUNWLFVBQVU7UUFDVixJQUFJO1FBQ0osS0FBSztRQUNMLE1BQU07S0FDUCxDQUFDO0lBQ0YsTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDLEdBQUc7UUFDakMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztRQUMvQyxDQUFDLENBQUMsaUJBQWlCLENBQUM7SUFFdEIsSUFBSSxPQUFPLENBQUM7SUFDWixLQUNFLElBQUksYUFBYSxHQUFHLENBQUMsRUFDckIsYUFBYSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQ2hDLGFBQWEsRUFBRSxFQUNmO1FBQ0EsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzlCLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO1lBQy9CLE1BQU07U0FDUDtLQUNGO0lBQ0QsTUFBTSxZQUFZLEdBQUcsYUFBYSxDQUFDLEVBQUUsSUFBSSxXQUFXLENBQUM7SUFDckQsSUFBSSxPQUFPLEVBQUU7UUFDWCxPQUFPLEdBQUcsWUFBWSxHQUFHLE9BQU8sRUFBRSxDQUFDO0tBQ3BDO1NBQU07UUFDTCxPQUFPLFNBQVMsQ0FBQztLQUNsQjtBQUNILENBQUM7QUFD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LENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUdyQyxJQUNFLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxVQUFVLENBQUMsTUFBTSxJQUFJLEtBQUssRUFDOUQ7WUFDQSxNQUFNO1NBQ1A7UUFDRCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdEIsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN2QjtJQUVELEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQztJQUU5QixRQUFRLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxRQUFRLENBQUMsQ0FBQztJQUUxRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWx0ZXJPcHRpb25zLCBTb3VyY2VPcHRpb25zIH0gZnJvbSBcIi4vaW50ZXJmYWNlLnRzXCI7XG5pbXBvcnQgeyBnZXQgfSBmcm9tIFwiLi91dGlscy9nZXQudHNcIjtcbmltcG9ydCB7IGxvZyB9IGZyb20gXCIuLi9kZXBzLnRzXCI7XG5pbXBvcnQgeyBDb250ZXh0IH0gZnJvbSBcIi4vaW50ZXJuYWwtaW50ZXJmYWNlLnRzXCI7XG5pbnRlcmZhY2UgRmlsdGVyVHJpZ2dlck9wdGlvbiBleHRlbmRzIEZpbHRlck9wdGlvbnMge1xuICByZXBvcnRlcjogbG9nLkxvZ2dlcjtcbn1cbmludGVyZmFjZSBTb3VyY2VUcmlnZ2VyT3B0aW9uIGV4dGVuZHMgU291cmNlT3B0aW9ucyB7XG4gIHJlcG9ydGVyOiBsb2cuTG9nZ2VyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFNvdXJjZUl0ZW1VbmlxdWVLZXkoXG4gIGl0ZW06IHVua25vd24sXG4gIHNvdXJjZUluZGV4OiBudW1iZXIsXG4gIHNvdXJjZU9wdGlvbnM6IFNvdXJjZU9wdGlvbnMsXG4pOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICBjb25zdCBkZWZhdWx0S2V5c0ZpZWxkcyA9IFtcbiAgICBcImlkXCIsXG4gICAgXCJndWlkXCIsXG4gICAgXCJfaWRcIixcbiAgICBcIm9iamVjdElkXCIsXG4gICAgXCJvYmplY3RJRFwiLFxuICAgIFwiSURcIixcbiAgICBcInVybFwiLFxuICAgIFwibGlua1wiLFxuICBdO1xuICBjb25zdCBrZXlGaWVsZHMgPSBzb3VyY2VPcHRpb25zLmtleVxuICAgID8gW3NvdXJjZU9wdGlvbnMua2V5XS5jb25jYXQoZGVmYXVsdEtleXNGaWVsZHMpXG4gICAgOiBkZWZhdWx0S2V5c0ZpZWxkcztcbiAgLy8gdW5pcXVlIGtleVxuICBsZXQgaXRlbUtleTtcbiAgZm9yIChcbiAgICBsZXQga2V5RmllbGRJbmRleCA9IDA7XG4gICAga2V5RmllbGRJbmRleCA8IGtleUZpZWxkcy5sZW5ndGg7XG4gICAga2V5RmllbGRJbmRleCsrXG4gICkge1xuICAgIGNvbnN0IGtleUZpZWxkID0ga2V5RmllbGRzW2tleUZpZWxkSW5kZXhdO1xuICAgIGl0ZW1LZXkgPSBnZXQoaXRlbSwga2V5RmllbGQpO1xuICAgIGlmICh0eXBlb2YgaXRlbUtleSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGNvbnN0IHNvdXJjZVByZWZpeCA9IHNvdXJjZU9wdGlvbnMuaWQgfHwgc291cmNlSW5kZXg7XG4gIGlmIChpdGVtS2V5KSB7XG4gICAgcmV0dXJuIGAke3NvdXJjZVByZWZpeH0ke2l0ZW1LZXl9YDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0U291cmNlSXRlbXNGcm9tUmVzdWx0KFxuICBjdHg6IENvbnRleHQsXG4gIHNvdXJjZU9wdGlvbnM6IFNvdXJjZVRyaWdnZXJPcHRpb24sXG4pOiBDb250ZXh0IHtcbiAgY29uc3QgeyByZXBvcnRlciB9ID0gc291cmNlT3B0aW9ucztcbiAgLy8gZm9ybWF0XG4gIGNvbnN0IGZvcmNlID0gc291cmNlT3B0aW9ucz8uZm9yY2U7XG5cbiAgLy8gZ2V0IGl0ZW1zIHBhdGgsIGdldCBkZWR1cGxpY2F0aW9uIGtleVxuICBsZXQgaXRlbXMgPSBjdHgucHVibGljLnJlc3VsdDtcblxuICBpZiAoc291cmNlT3B0aW9ucy5pdGVtc1BhdGgpIHtcbiAgICBpdGVtcyA9IGdldChcbiAgICAgIGN0eC5wdWJsaWMucmVzdWx0IGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxuICAgICAgc291cmNlT3B0aW9ucy5pdGVtc1BhdGgsXG4gICAgKTtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheShpdGVtcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJzb3VyY2UgcmVzdWx0IG11c3QgYmUgYW4gYXJyYXksIGJ1dCBnb3QgXCIgKyB0eXBlb2YgaXRlbXMpO1xuICB9XG5cbiAgY29uc3QgZmluYWxJdGVtcyA9IFtdO1xuICBmb3IgKGxldCBpdGVtSW5kZXggPSAwOyBpdGVtSW5kZXggPCBpdGVtcy5sZW5ndGg7IGl0ZW1JbmRleCsrKSB7XG4gICAgLy8gcmVhY2ggbWF4IGl0ZW1zXG4gICAgY29uc3QgaXRlbSA9IGl0ZW1zW2l0ZW1JbmRleF07XG5cbiAgICBjb25zdCBrZXkgPSBnZXRTb3VyY2VJdGVtVW5pcXVlS2V5KFxuICAgICAgaXRlbSxcbiAgICAgIGN0eC5wdWJsaWMuc291cmNlSW5kZXghLFxuICAgICAgc291cmNlT3B0aW9ucyxcbiAgICApO1xuICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVwb3J0ZXIud2FybmluZyhcbiAgICAgICAgYHdpbGwgYmUgZGlyZWN0bHkgYWRkZWQgdG8gaXRlbXNgLFxuICAgICAgICBcIk5vIHVuaXF1ZSBrZXlcIixcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAga2V5ICE9PSB1bmRlZmluZWQgJiYgY3R4LmludGVybmFsU3RhdGUgJiZcbiAgICAgIChjdHguaW50ZXJuYWxTdGF0ZS5rZXlzIHx8IFtdKS5pbmNsdWRlcyhrZXkpICYmXG4gICAgICAhZm9yY2VcbiAgICApIHtcbiAgICAgIHJlcG9ydGVyLmRlYnVnKGAke2tleX0sIGNhdXNlIGl0IGhhcyBiZWVuIHByb2Nlc3NlZGAsIFwiU2tpcCBpdGVtXCIpO1xuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGtleSAhPT0gdW5kZWZpbmVkICYmIGN0eC5pbnRlcm5hbFN0YXRlICYmXG4gICAgICAoY3R4LmludGVybmFsU3RhdGUua2V5cyB8fCBbXSkuaW5jbHVkZXMoa2V5KSAmJiBmb3JjZVxuICAgICkge1xuICAgICAgcmVwb3J0ZXIuZGVidWcoXG4gICAgICAgIGAke2tleX0sIGNhdXNlIC0tZm9yY2UgaXMgdHJ1ZWAsXG4gICAgICAgIFwiQWRkIHByb2Nlc3NlZCBpdGVtXCIsXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoZm9yY2UpIHtcbiAgICAgIHJlcG9ydGVyLmRlYnVnKGAke2tleX1gLCBcImFkZCBpdGVtXCIpO1xuICAgIH1cblxuICAgIGZpbmFsSXRlbXMucHVzaChpdGVtKTtcbiAgfVxuICAvLyBzYXZlIGN1cnJlbnQga2V5IHRvIGRiXG4gIGN0eC5wdWJsaWMuaXRlbXMgPSBmaW5hbEl0ZW1zO1xuXG4gIHJldHVybiBjdHg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJDdHhJdGVtcyhcbiAgY3R4OiBDb250ZXh0LFxuICBmaWx0ZXJPcHRpb25zOiBGaWx0ZXJUcmlnZ2VyT3B0aW9uLFxuKTogQ29udGV4dCB7XG4gIGNvbnN0IHsgcmVwb3J0ZXIgfSA9IGZpbHRlck9wdGlvbnM7XG4gIC8vIGZvcm1hdFxuICBjb25zdCBsaW1pdCA9IGZpbHRlck9wdGlvbnM/LmxpbWl0O1xuICAvLyBnZXQgaXRlbXMgcGF0aCwgZ2V0IGRlZHVwbGljYXRpb24ga2V5XG4gIGNvbnN0IGl0ZW1zID0gY3R4LnB1YmxpYy5pdGVtcztcblxuICBpZiAoIUFycmF5LmlzQXJyYXkoaXRlbXMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJjdHguaXRlbXMgbXVzdCBiZSBhbiBhcnJheSwgYnV0IGdvdCBcIiArIHR5cGVvZiBpdGVtcyArIFwiLCBmaWx0ZXIgZmFpbGVkXCIsXG4gICAgKTtcbiAgfVxuICByZXBvcnRlci5kZWJ1ZyhgSW5wdXQgJHtpdGVtcy5sZW5ndGh9IGl0ZW1zYCk7XG5cbiAgY29uc3QgZmluYWxJdGVtcyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAvLyByZWFjaCBtYXggaXRlbXNcblxuICAgIGlmIChcbiAgICAgIGxpbWl0ICE9PSB1bmRlZmluZWQgJiYgbGltaXQgPiAwICYmIGZpbmFsSXRlbXMubGVuZ3RoID49IGxpbWl0XG4gICAgKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xuXG4gICAgZmluYWxJdGVtcy5wdXNoKGl0ZW0pO1xuICB9XG4gIC8vIHNhdmUgY3VycmVudCBrZXkgdG8gZGJcbiAgY3R4LnB1YmxpYy5pdGVtcyA9IGZpbmFsSXRlbXM7XG5cbiAgcmVwb3J0ZXIuZGVidWcoYE91dHB1dCAke2N0eC5wdWJsaWMuaXRlbXMubGVuZ3RofSBpdGVtc2ApO1xuXG4gIHJldHVybiBjdHg7XG59XG4iXX0=