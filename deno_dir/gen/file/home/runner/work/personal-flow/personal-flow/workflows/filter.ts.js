import puppeteer from "https://deno.land/x/puppeteer@9.0.2/mod.ts";
export default async function (ctx) {
    let browser = null;
    let page = null;
    const getBrowser = async () => {
        if (browser)
            return browser;
        browser = await puppeteer.launch({
            devtools: false,
            defaultViewport: { width: 768, height: 1024 },
            args: ["--lang=zh-Hans,zh", "--disable-gpu"],
        });
        browser.on("disconnected", () => (browser = null));
        return browser;
    };
    const getNewPage = async (url, force) => {
        if (page)
            return page;
        browser = await getBrowser();
        const pages = await browser.pages();
        if (pages[0] && !force) {
            page = pages[0];
        }
        else {
            page = await browser.newPage();
        }
        await page.setUserAgent("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36");
        await page.goto(url, { waitUntil: "domcontentloaded" });
        await page.waitForTimeout(4000);
        return page;
    };
    let filterResults = [];
    for (const item of ctx.items) {
        const link = item.links[0].href;
        page = await getNewPage(link, false);
        let isLessThan15 = false;
        if (page) {
            await autoScroll(page);
            await removeAllLinks(page);
            let scale = 1.6;
            if (link.startsWith("https://news.ycombinator.com")) {
                scale = 2.0;
            }
            const result = await page.pdf({ scale: scale, format: 'a4', omitBackground: true });
            isLessThan15 = result.byteLength < 15000000;
            console.log("isLessThan15", isLessThan15);
        }
        if (page) {
            await page.close();
            page = null;
        }
        if (browser) {
            await browser.close();
            browser = null;
        }
        filterResults.push(isLessThan15);
        if (isLessThan15) {
            break;
        }
    }
    if (filterResults.length < ctx.items.length) {
        filterResults = filterResults.concat(Array(ctx.items.length - filterResults.length).fill(false));
    }
    return filterResults;
}
async function removeAllLinks(page) {
    await page.evaluate(async () => {
        await new Promise((resolve) => {
            const all_links = document.body.getElementsByTagName("a");
            for (let i = 0; i < all_links.length; i++) {
                all_links[i].removeAttribute("href");
            }
            resolve(true);
        });
    });
}
async function autoScroll(page) {
    await page.evaluate(async () => {
        await new Promise((resolve) => {
            let totalHeight = 0;
            const distance = 100;
            const timeout = 8000;
            const now = Date.now();
            const timer = setInterval(() => {
                const scrollHeight = document.body.scrollHeight;
                window.scrollBy(0, distance);
                totalHeight += distance;
                const newNow = Date.now();
                if (newNow - now > timeout) {
                    clearInterval(timer);
                    resolve(true);
                    return;
                }
                if (totalHeight >= scrollHeight) {
                    clearInterval(timer);
                    resolve(true);
                }
            }, 100);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,