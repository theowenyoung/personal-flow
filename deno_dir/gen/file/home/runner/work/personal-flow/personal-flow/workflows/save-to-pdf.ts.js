import { Base64 } from 'https://deno.land/x/bb64@1.1.0/mod.ts';
import puppeteer from "https://deno.land/x/puppeteer@9.0.2/mod.ts";
export default async function (item, ctx) {
    let browser = null;
    let page = null;
    const getBrowser = async () => {
        if (browser)
            return browser;
        browser = await puppeteer.launch({
            devtools: false,
            defaultViewport: { width: 1370, height: 1200 },
            args: ["--lang=zh-Hans,zh", "--disable-gpu"],
        });
        browser.on("disconnected", () => (browser = null));
        return browser;
    };
    const getNewPage = async (url, force) => {
        if (page)
            return page;
        browser = await getBrowser();
        const pages = await browser.pages();
        if (pages[0] && !force) {
            page = pages[0];
        }
        else {
            page = await browser.newPage();
        }
        await page.setUserAgent("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36");
        await page.goto(url, { waitUntil: "domcontentloaded" });
        await page.waitForTimeout(4000);
        return page;
    };
    const link = item.links[0].href;
    page = await getNewPage(link, false);
    let b64encoded = "";
    if (page) {
        await autoScroll(page);
        await removeAllLinks(page);
        let scale = 1.6;
        if (link.startsWith("https://news.ycombinator.com")) {
            scale = 2.0;
        }
        const result = await page.pdf({ scale: scale, format: 'a4', omitBackground: true });
        b64encoded = Base64.fromUint8Array(result).toString();
    }
    if (page) {
        await page.close();
    }
    if (browser) {
        await browser.close();
    }
    const title = item.title.value.trim();
    if (b64encoded) {
        const payload = {
            AdvanceErrorHandling: true,
            SandboxMode: false,
            "Messages": [
                {
                    "From": {
                        "Email": ctx.env.FROM_EMAIL,
                        "Name": "Kindle"
                    },
                    "To": [
                        {
                            "Email": ctx.env.TO_EMAIL,
                            "Name": "Try"
                        }
                    ],
                    "Subject": title,
                    "TextPart": item.comments,
                    "CustomID": item.id,
                    "Attachments": [
                        {
                            "Filename": `${title}.pdf`,
                            "ContentType": "application/pdf",
                            "Base64Content": b64encoded
                        }
                    ]
                }
            ]
        };
        return (payload);
    }
    else {
        throw new Error('save pdf error');
    }
}
async function removeAllLinks(page) {
    await page.evaluate(async () => {
        await new Promise((resolve) => {
            const all_links = document.body.getElementsByTagName("a");
            for (let i = 0; i < all_links.length; i++) {
                all_links[i].removeAttribute("href");
            }
            resolve(true);
        });
    });
}
async function autoScroll(page) {
    await page.evaluate(async () => {
        await new Promise((resolve) => {
            let totalHeight = 0;
            const distance = 100;
            const timeout = 8000;
            const now = Date.now();
            const timer = setInterval(() => {
                const scrollHeight = document.body.scrollHeight;
                window.scrollBy(0, distance);
                totalHeight += distance;
                const newNow = Date.now();
                if (newNow - now > timeout) {
                    clearInterval(timer);
                    resolve(true);
                    return;
                }
                if (totalHeight >= scrollHeight) {
                    clearInterval(timer);
                    resolve(true);
                }
            }, 100);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,