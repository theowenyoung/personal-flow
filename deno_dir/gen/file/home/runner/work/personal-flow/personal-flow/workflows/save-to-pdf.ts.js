import { Base64 } from 'https://deno.land/x/bb64@1.1.0/mod.ts';
import puppeteer from "https://deno.land/x/puppeteer@9.0.2/mod.ts";
export default async function (item, ctx) {
    let browser = null;
    let page = null;
    const getBrowser = async () => {
        if (browser)
            return browser;
        browser = await puppeteer.launch({
            devtools: false,
            defaultViewport: { width: 1370, height: 1200 },
            args: ["--lang=zh-Hans,zh", "--disable-gpu"],
        });
        browser.on("disconnected", () => (browser = null));
        return browser;
    };
    const getNewPage = async (url, force) => {
        if (page)
            return page;
        browser = await getBrowser();
        const pages = await browser.pages();
        if (pages[0] && !force) {
            page = pages[0];
        }
        else {
            page = await browser.newPage();
        }
        await page.setUserAgent("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36");
        await page.goto(url, { waitUntil: "domcontentloaded" });
        await page.waitForTimeout(2000);
        return page;
    };
    const link = item.links[0].href;
    page = await getNewPage(link, false);
    let b64encoded = "";
    if (page) {
        const result = await page.pdf({ scale: 1.6, format: 'a4', omitBackground: true });
        b64encoded = Base64.fromUint8Array(result).toString();
    }
    if (page) {
        await page.close();
    }
    if (browser) {
        await browser.close();
    }
    const title = item.title.value.trim();
    if (b64encoded) {
        const payload = {
            AdvanceErrorHandling: true,
            SandboxMode: false,
            "Messages": [
                {
                    "From": {
                        "Email": ctx.env.FROM_EMAIL,
                        "Name": "Kindle"
                    },
                    "To": [
                        {
                            "Email": ctx.env.TO_EMAIL,
                            "Name": "Try"
                        }
                    ],
                    "Subject": title,
                    "TextPart": item.comments,
                    "CustomID": item.id,
                    "Attachments": [
                        {
                            "Filename": `${title}.pdf`,
                            "ContentType": "application/pdf",
                            "Base64Content": b64encoded
                        }
                    ]
                }
            ]
        };
        return (payload);
    }
    else {
        throw new Error('save pdf error');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZS10by1wZGYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzYXZlLXRvLXBkZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sdUNBQXVDLENBQUM7QUFDN0QsT0FBTyxTQUdOLE1BQU0sNENBQTRDLENBQUM7QUFFcEQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFdBQVcsSUFBMkMsRUFBQyxHQUFpQjtJQUMxRixJQUFJLE9BQU8sR0FBbUIsSUFBSSxDQUFDO0lBQ25DLElBQUksSUFBSSxHQUFnQixJQUFJLENBQUM7SUFDN0IsTUFBTSxVQUFVLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDNUIsSUFBSSxPQUFPO1lBQUUsT0FBTyxPQUFPLENBQUM7UUFDNUIsT0FBTyxHQUFHLE1BQU0sU0FBUyxDQUFDLE1BQU0sQ0FBQztZQUMvQixRQUFRLEVBQUUsS0FBSztZQUVmLGVBQWUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtZQUM5QyxJQUFJLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxlQUFlLENBQUM7U0FDN0MsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNuRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDLENBQUM7SUFFRixNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsR0FBVSxFQUFDLEtBQWMsRUFBaUIsRUFBRTtRQUNwRSxJQUFJLElBQUk7WUFBRSxPQUFPLElBQUksQ0FBQztRQUN0QixPQUFPLEdBQUcsTUFBTSxVQUFVLEVBQUUsQ0FBQztRQUM3QixNQUFNLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNwQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUN0QixJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO2FBQU07WUFDTCxJQUFJLEdBQUcsTUFBTSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDaEM7UUFDRCxNQUFNLElBQUksQ0FBQyxZQUFZLENBQ3JCLDJHQUEyRyxDQUM1RyxDQUFDO1FBRUYsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUM7UUFFeEQsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBR2hDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQyxDQUFDO0lBQ0YsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFjLENBQUM7SUFDeEMsSUFBSSxHQUFHLE1BQU0sVUFBVSxDQUFDLElBQUksRUFBQyxLQUFLLENBQUMsQ0FBQztJQUN0QyxJQUFJLFVBQVUsR0FBSSxFQUFFLENBQUM7SUFDckIsSUFBRyxJQUFJLEVBQUM7UUFJUCxNQUFNLE1BQU0sR0FBSSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQyxLQUFLLEVBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUMsY0FBYyxFQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFJN0UsVUFBVSxHQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7S0FFdkQ7SUFFRCxJQUFJLElBQUksRUFBRTtRQUNSLE1BQU0sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQ3BCO0lBRUQsSUFBSSxPQUFPLEVBQUU7UUFDWCxNQUFPLE9BQW9CLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDckM7SUFFRCxNQUFNLEtBQUssR0FBSSxJQUFJLENBQUMsS0FBMEMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFNUUsSUFBRyxVQUFVLEVBQUM7UUFDWixNQUFNLE9BQU8sR0FBSTtZQUNmLG9CQUFvQixFQUFDLElBQUk7WUFDekIsV0FBVyxFQUFDLEtBQUs7WUFDakIsVUFBVSxFQUFDO2dCQUNUO29CQUNFLE1BQU0sRUFBRTt3QkFDTixPQUFPLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVO3dCQUMzQixNQUFNLEVBQUUsUUFBUTtxQkFDakI7b0JBQ0QsSUFBSSxFQUFFO3dCQUNKOzRCQUNFLE9BQU8sRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVE7NEJBQ3pCLE1BQU0sRUFBRSxLQUFLO3lCQUNkO3FCQUNGO29CQUNELFNBQVMsRUFBRSxLQUFLO29CQUNoQixVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVE7b0JBQ3pCLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRTtvQkFDbkIsYUFBYSxFQUFDO3dCQUNaOzRCQUNFLFVBQVUsRUFBQyxHQUFHLEtBQUssTUFBTTs0QkFDekIsYUFBYSxFQUFDLGlCQUFpQjs0QkFDL0IsZUFBZSxFQUFDLFVBQVU7eUJBQzNCO3FCQUNGO2lCQUNGO2FBQ0Y7U0FDRixDQUFBO1FBQ0QsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ2xCO1NBQUk7UUFDSCxNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUE7S0FDbEM7QUFFSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtCYXNlNjR9IGZyb20gJ2h0dHBzOi8vZGVuby5sYW5kL3gvYmI2NEAxLjEuMC9tb2QudHMnO1xuaW1wb3J0IHB1cHBldGVlciwge1xuICBCcm93c2VyLFxuICBQYWdlLFxufSBmcm9tIFwiaHR0cHM6Ly9kZW5vLmxhbmQveC9wdXBwZXRlZXJAOS4wLjIvbW9kLnRzXCI7XG5pbXBvcnQgdHlwZSB7UHVibGljQ29udGV4dH0gZnJvbSAnaHR0cHM6Ly9kZW5vLmxhbmQveC9kZW5vZmxvd0AwLjAuMjcvbW9kLnRzJztcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIChpdGVtOlJlY29yZDxzdHJpbmcsUmVjb3JkPHN0cmluZyxzdHJpbmc+W10+LGN0eDpQdWJsaWNDb250ZXh0KSB7ICBcbiAgbGV0IGJyb3dzZXI6IEJyb3dzZXIgfCBudWxsID0gbnVsbDtcbiAgbGV0IHBhZ2U6IFBhZ2UgfCBudWxsID0gbnVsbDtcbiAgY29uc3QgZ2V0QnJvd3NlciA9IGFzeW5jICgpID0+IHtcbiAgICBpZiAoYnJvd3NlcikgcmV0dXJuIGJyb3dzZXI7XG4gICAgYnJvd3NlciA9IGF3YWl0IHB1cHBldGVlci5sYXVuY2goe1xuICAgICAgZGV2dG9vbHM6IGZhbHNlLFxuICAgICAgLy8gaGVhZGxlc3M6ICFpc0RldixcbiAgICAgIGRlZmF1bHRWaWV3cG9ydDogeyB3aWR0aDogMTM3MCwgaGVpZ2h0OiAxMjAwIH0sXG4gICAgICBhcmdzOiBbXCItLWxhbmc9emgtSGFucyx6aFwiLCBcIi0tZGlzYWJsZS1ncHVcIl0sXG4gICAgfSk7XG4gICAgYnJvd3Nlci5vbihcImRpc2Nvbm5lY3RlZFwiLCAoKSA9PiAoYnJvd3NlciA9IG51bGwpKTtcbiAgICByZXR1cm4gYnJvd3NlcjtcbiAgfTtcblxuICBjb25zdCBnZXROZXdQYWdlID0gYXN5bmMgKHVybDpzdHJpbmcsZm9yY2U6IGJvb2xlYW4pOiBQcm9taXNlPFBhZ2U+ID0+IHtcbiAgICBpZiAocGFnZSkgcmV0dXJuIHBhZ2U7XG4gICAgYnJvd3NlciA9IGF3YWl0IGdldEJyb3dzZXIoKTtcbiAgICBjb25zdCBwYWdlcyA9IGF3YWl0IGJyb3dzZXIucGFnZXMoKTtcbiAgICBpZiAocGFnZXNbMF0gJiYgIWZvcmNlKSB7XG4gICAgICBwYWdlID0gcGFnZXNbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhZ2UgPSBhd2FpdCBicm93c2VyLm5ld1BhZ2UoKTtcbiAgICB9XG4gICAgYXdhaXQgcGFnZS5zZXRVc2VyQWdlbnQoXG4gICAgICBcIk1vemlsbGEvNS4wIChYMTE7IExpbnV4IHg4Nl82NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzc4LjAuMzkwNC4xMDggU2FmYXJpLzUzNy4zNlwiXG4gICAgKTtcbiAgICAvLyBhd2FpdCBwYWdlLnNldFZpZXdwb3J0KHsgd2lkdGg6IDEzNzAsIGhlaWdodDogMTIwMCB9KTtcbiAgICBhd2FpdCBwYWdlLmdvdG8odXJsLCB7IHdhaXRVbnRpbDogXCJkb21jb250ZW50bG9hZGVkXCIgfSk7XG5cbiAgICBhd2FpdCBwYWdlLndhaXRGb3JUaW1lb3V0KDIwMDApO1xuICAgIC8vIGF3YWl0IHBhZ2Uuc2NyZWVuc2hvdCh7IHBhdGg6IFwiZXhhbXBsZS5wbmdcIiB9KTtcblxuICAgIHJldHVybiBwYWdlO1xuICB9O1xuICBjb25zdCBsaW5rID0gaXRlbS5saW5rc1swXS5ocmVmIGFzIHN0cmluZzsgIFxuICAgIHBhZ2UgPSBhd2FpdCBnZXROZXdQYWdlKGxpbmssZmFsc2UpO1xuICBsZXQgYjY0ZW5jb2RlZCAgPSBcIlwiO1xuICBpZihwYWdlKXtcblxuICAgIC8vIHNhdmUgXG4gICAgLy8gcGF0aDogJy4vY2hhbmdlZC90ZXN0LnBkZidcbiAgIGNvbnN0IHJlc3VsdCA9ICBhd2FpdCBwYWdlLnBkZih7c2NhbGU6MS42LCBmb3JtYXQ6ICdhNCcsb21pdEJhY2tncm91bmQ6dHJ1ZSB9KTtcbiAgIFxuICAgIC8vIGdldCBiYXNlNjRcbiAgICAvLyBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCd1dGYtOCcpO1xuICAgICBiNjRlbmNvZGVkID1CYXNlNjQuZnJvbVVpbnQ4QXJyYXkocmVzdWx0KS50b1N0cmluZygpO1xuXG4gIH1cblxuICBpZiAocGFnZSkge1xuICAgIGF3YWl0IHBhZ2UuY2xvc2UoKTtcbiAgfVxuICAvLyBxdWl0IHB1cHBldGVlclxuICBpZiAoYnJvd3Nlcikge1xuICAgIGF3YWl0IChicm93c2VyIGFzIEJyb3dzZXIpIS5jbG9zZSgpO1xuICB9XG4gIC8vIGNvbnN0IHRpdGxlID0gXCJ0ZXN0XCI7XG4gIGNvbnN0IHRpdGxlID0gKGl0ZW0udGl0bGUgYXMgdW5rbm93biBhcyBSZWNvcmQ8c3RyaW5nLHN0cmluZz4pLnZhbHVlLnRyaW0oKTtcbiAgXG4gIGlmKGI2NGVuY29kZWQpe1xuICAgIGNvbnN0IHBheWxvYWQgPSAge1xuICAgICAgQWR2YW5jZUVycm9ySGFuZGxpbmc6dHJ1ZSxcbiAgICAgIFNhbmRib3hNb2RlOmZhbHNlLFxuICAgICAgXCJNZXNzYWdlc1wiOltcbiAgICAgICAge1xuICAgICAgICAgIFwiRnJvbVwiOiB7XG4gICAgICAgICAgICBcIkVtYWlsXCI6IGN0eC5lbnYuRlJPTV9FTUFJTCxcbiAgICAgICAgICAgIFwiTmFtZVwiOiBcIktpbmRsZVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIlRvXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJFbWFpbFwiOiBjdHguZW52LlRPX0VNQUlMLFxuICAgICAgICAgICAgICBcIk5hbWVcIjogXCJUcnlcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJTdWJqZWN0XCI6IHRpdGxlLFxuICAgICAgICAgIFwiVGV4dFBhcnRcIjogaXRlbS5jb21tZW50cyxcbiAgICAgICAgICBcIkN1c3RvbUlEXCI6IGl0ZW0uaWQsICBcbiAgICAgICAgICBcIkF0dGFjaG1lbnRzXCI6W1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcIkZpbGVuYW1lXCI6YCR7dGl0bGV9LnBkZmAsXG4gICAgICAgICAgICAgIFwiQ29udGVudFR5cGVcIjpcImFwcGxpY2F0aW9uL3BkZlwiLFxuICAgICAgICAgICAgICBcIkJhc2U2NENvbnRlbnRcIjpiNjRlbmNvZGVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSAgICBcbiAgICByZXR1cm4gKHBheWxvYWQpO1xuICB9ZWxzZXtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NhdmUgcGRmIGVycm9yJylcbiAgfVxuXG59XG5cbiJdfQ==